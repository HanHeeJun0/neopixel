
neopixel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003380  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800343c  0800343c  0000443c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034d0  080034d0  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  080034d0  080034d0  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034d0  080034d0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034d0  080034d0  000044d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080034d4  080034d4  000044d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080034d8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  2000000c  080034e4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  080034e4  000053f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a688  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001daf  00000000  00000000  0000f6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  00011470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000922  00000000  00000000  00012050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb83  00000000  00000000  00012972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e10a  00000000  00000000  0002e4f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b4c61  00000000  00000000  0003c5ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f1260  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029dc  00000000  00000000  000f12a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  000f3c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003424 	.word	0x08003424

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003424 	.word	0x08003424

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000222:	4b0c      	ldr	r3, [pc, #48]	@ (8000254 <MX_DMA_Init+0x38>)
 8000224:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000226:	4b0b      	ldr	r3, [pc, #44]	@ (8000254 <MX_DMA_Init+0x38>)
 8000228:	2101      	movs	r1, #1
 800022a:	430a      	orrs	r2, r1
 800022c:	639a      	str	r2, [r3, #56]	@ 0x38
 800022e:	4b09      	ldr	r3, [pc, #36]	@ (8000254 <MX_DMA_Init+0x38>)
 8000230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000232:	2201      	movs	r2, #1
 8000234:	4013      	ands	r3, r2
 8000236:	607b      	str	r3, [r7, #4]
 8000238:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800023a:	2200      	movs	r2, #0
 800023c:	2100      	movs	r1, #0
 800023e:	2009      	movs	r0, #9
 8000240:	f000 fd40 	bl	8000cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000244:	2009      	movs	r0, #9
 8000246:	f000 fd52 	bl	8000cee <HAL_NVIC_EnableIRQ>

}
 800024a:	46c0      	nop			@ (mov r8, r8)
 800024c:	46bd      	mov	sp, r7
 800024e:	b002      	add	sp, #8
 8000250:	bd80      	pop	{r7, pc}
 8000252:	46c0      	nop			@ (mov r8, r8)
 8000254:	40021000 	.word	0x40021000

08000258 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800025e:	4b0e      	ldr	r3, [pc, #56]	@ (8000298 <MX_GPIO_Init+0x40>)
 8000260:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000262:	4b0d      	ldr	r3, [pc, #52]	@ (8000298 <MX_GPIO_Init+0x40>)
 8000264:	2120      	movs	r1, #32
 8000266:	430a      	orrs	r2, r1
 8000268:	635a      	str	r2, [r3, #52]	@ 0x34
 800026a:	4b0b      	ldr	r3, [pc, #44]	@ (8000298 <MX_GPIO_Init+0x40>)
 800026c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800026e:	2220      	movs	r2, #32
 8000270:	4013      	ands	r3, r2
 8000272:	607b      	str	r3, [r7, #4]
 8000274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000276:	4b08      	ldr	r3, [pc, #32]	@ (8000298 <MX_GPIO_Init+0x40>)
 8000278:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800027a:	4b07      	ldr	r3, [pc, #28]	@ (8000298 <MX_GPIO_Init+0x40>)
 800027c:	2104      	movs	r1, #4
 800027e:	430a      	orrs	r2, r1
 8000280:	635a      	str	r2, [r3, #52]	@ 0x34
 8000282:	4b05      	ldr	r3, [pc, #20]	@ (8000298 <MX_GPIO_Init+0x40>)
 8000284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000286:	2204      	movs	r2, #4
 8000288:	4013      	ands	r3, r2
 800028a:	603b      	str	r3, [r7, #0]
 800028c:	683b      	ldr	r3, [r7, #0]

}
 800028e:	46c0      	nop			@ (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	b002      	add	sp, #8
 8000294:	bd80      	pop	{r7, pc}
 8000296:	46c0      	nop			@ (mov r8, r8)
 8000298:	40021000 	.word	0x40021000

0800029c <ws2812Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

bool ws2812Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
  memset(led_buf, 0, sizeof(led_buf));
 80002a0:	23c4      	movs	r3, #196	@ 0xc4
 80002a2:	009a      	lsls	r2, r3, #2
 80002a4:	4b05      	ldr	r3, [pc, #20]	@ (80002bc <ws2812Init+0x20>)
 80002a6:	2100      	movs	r1, #0
 80002a8:	0018      	movs	r0, r3
 80002aa:	f003 f885 	bl	80033b8 <memset>

  is_init = true;
 80002ae:	4b04      	ldr	r3, [pc, #16]	@ (80002c0 <ws2812Init+0x24>)
 80002b0:	2201      	movs	r2, #1
 80002b2:	701a      	strb	r2, [r3, #0]


  return true;
 80002b4:	2301      	movs	r3, #1
}
 80002b6:	0018      	movs	r0, r3
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	2000002c 	.word	0x2000002c
 80002c0:	20000028 	.word	0x20000028

080002c4 <ws2812Begin>:

void ws2812Begin(uint32_t led_cnt)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
  ws2812.LED_CNT = led_cnt;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	b29a      	uxth	r2, r3
 80002d0:	4b09      	ldr	r3, [pc, #36]	@ (80002f8 <ws2812Begin+0x34>)
 80002d2:	801a      	strh	r2, [r3, #0]


  HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_3, (uint32_t *)led_buf, (280 + 24 * led_cnt) * 1);
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	b29b      	uxth	r3, r3
 80002d8:	2218      	movs	r2, #24
 80002da:	4353      	muls	r3, r2
 80002dc:	b29b      	uxth	r3, r3
 80002de:	3319      	adds	r3, #25
 80002e0:	33ff      	adds	r3, #255	@ 0xff
 80002e2:	b29b      	uxth	r3, r3
 80002e4:	4a05      	ldr	r2, [pc, #20]	@ (80002fc <ws2812Begin+0x38>)
 80002e6:	4806      	ldr	r0, [pc, #24]	@ (8000300 <ws2812Begin+0x3c>)
 80002e8:	2108      	movs	r1, #8
 80002ea:	f001 ff0b 	bl	8002104 <HAL_TIM_PWM_Start_DMA>
}
 80002ee:	46c0      	nop			@ (mov r8, r8)
 80002f0:	46bd      	mov	sp, r7
 80002f2:	b002      	add	sp, #8
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	46c0      	nop			@ (mov r8, r8)
 80002f8:	2000033c 	.word	0x2000033c
 80002fc:	2000002c 	.word	0x2000002c
 8000300:	20000340 	.word	0x20000340

08000304 <ws2812SetColor>:

void ws2812SetColor(uint32_t index, uint8_t red, uint8_t green, uint8_t blue)
{
 8000304:	b590      	push	{r4, r7, lr}
 8000306:	b08b      	sub	sp, #44	@ 0x2c
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	000c      	movs	r4, r1
 800030e:	0010      	movs	r0, r2
 8000310:	0019      	movs	r1, r3
 8000312:	1cfb      	adds	r3, r7, #3
 8000314:	1c22      	adds	r2, r4, #0
 8000316:	701a      	strb	r2, [r3, #0]
 8000318:	1cbb      	adds	r3, r7, #2
 800031a:	1c02      	adds	r2, r0, #0
 800031c:	701a      	strb	r2, [r3, #0]
 800031e:	1c7b      	adds	r3, r7, #1
 8000320:	1c0a      	adds	r2, r1, #0
 8000322:	701a      	strb	r2, [r3, #0]
  uint8_t b_bit[8];

  uint32_t offset;


  for (int i=0; i<8; i++)
 8000324:	2300      	movs	r3, #0
 8000326:	627b      	str	r3, [r7, #36]	@ 0x24
 8000328:	e047      	b.n	80003ba <ws2812SetColor+0xb6>
  {
    if (red & (1<<7))
 800032a:	1cfb      	adds	r3, r7, #3
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	b25b      	sxtb	r3, r3
 8000330:	2b00      	cmp	r3, #0
 8000332:	da06      	bge.n	8000342 <ws2812SetColor+0x3e>
    {
      r_bit[i] = HIGH;
 8000334:	2318      	movs	r3, #24
 8000336:	18fa      	adds	r2, r7, r3
 8000338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800033a:	18d3      	adds	r3, r2, r3
 800033c:	2228      	movs	r2, #40	@ 0x28
 800033e:	701a      	strb	r2, [r3, #0]
 8000340:	e005      	b.n	800034e <ws2812SetColor+0x4a>
    }
    else
    {
      r_bit[i] = LOW;
 8000342:	2318      	movs	r3, #24
 8000344:	18fa      	adds	r2, r7, r3
 8000346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000348:	18d3      	adds	r3, r2, r3
 800034a:	2213      	movs	r2, #19
 800034c:	701a      	strb	r2, [r3, #0]
    }
    red <<= 1;
 800034e:	1cfa      	adds	r2, r7, #3
 8000350:	1cfb      	adds	r3, r7, #3
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	18db      	adds	r3, r3, r3
 8000356:	7013      	strb	r3, [r2, #0]

    if (green & (1<<7))
 8000358:	1cbb      	adds	r3, r7, #2
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	b25b      	sxtb	r3, r3
 800035e:	2b00      	cmp	r3, #0
 8000360:	da06      	bge.n	8000370 <ws2812SetColor+0x6c>
    {
      g_bit[i] = HIGH;
 8000362:	2310      	movs	r3, #16
 8000364:	18fa      	adds	r2, r7, r3
 8000366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000368:	18d3      	adds	r3, r2, r3
 800036a:	2228      	movs	r2, #40	@ 0x28
 800036c:	701a      	strb	r2, [r3, #0]
 800036e:	e005      	b.n	800037c <ws2812SetColor+0x78>
    }
    else
    {
      g_bit[i] = LOW;
 8000370:	2310      	movs	r3, #16
 8000372:	18fa      	adds	r2, r7, r3
 8000374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000376:	18d3      	adds	r3, r2, r3
 8000378:	2213      	movs	r2, #19
 800037a:	701a      	strb	r2, [r3, #0]
    }
    green <<= 1;
 800037c:	1cba      	adds	r2, r7, #2
 800037e:	1cbb      	adds	r3, r7, #2
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	18db      	adds	r3, r3, r3
 8000384:	7013      	strb	r3, [r2, #0]

    if (blue & (1<<7))
 8000386:	1c7b      	adds	r3, r7, #1
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	b25b      	sxtb	r3, r3
 800038c:	2b00      	cmp	r3, #0
 800038e:	da06      	bge.n	800039e <ws2812SetColor+0x9a>
    {
      b_bit[i] = HIGH;
 8000390:	2308      	movs	r3, #8
 8000392:	18fa      	adds	r2, r7, r3
 8000394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000396:	18d3      	adds	r3, r2, r3
 8000398:	2228      	movs	r2, #40	@ 0x28
 800039a:	701a      	strb	r2, [r3, #0]
 800039c:	e005      	b.n	80003aa <ws2812SetColor+0xa6>
    }
    else
    {
      b_bit[i] = LOW;
 800039e:	2308      	movs	r3, #8
 80003a0:	18fa      	adds	r2, r7, r3
 80003a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003a4:	18d3      	adds	r3, r2, r3
 80003a6:	2213      	movs	r2, #19
 80003a8:	701a      	strb	r2, [r3, #0]
    }
    blue <<= 1;
 80003aa:	1c7a      	adds	r2, r7, #1
 80003ac:	1c7b      	adds	r3, r7, #1
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	18db      	adds	r3, r3, r3
 80003b2:	7013      	strb	r3, [r2, #0]
  for (int i=0; i<8; i++)
 80003b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003b6:	3301      	adds	r3, #1
 80003b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80003ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003bc:	2b07      	cmp	r3, #7
 80003be:	ddb4      	ble.n	800032a <ws2812SetColor+0x26>
  }

  offset = 280;
 80003c0:	238c      	movs	r3, #140	@ 0x8c
 80003c2:	005b      	lsls	r3, r3, #1
 80003c4:	623b      	str	r3, [r7, #32]

    memcpy(&led_buf[offset + index*24 + 8*0], g_bit, 8*1);
 80003c6:	687a      	ldr	r2, [r7, #4]
 80003c8:	0013      	movs	r3, r2
 80003ca:	005b      	lsls	r3, r3, #1
 80003cc:	189b      	adds	r3, r3, r2
 80003ce:	00db      	lsls	r3, r3, #3
 80003d0:	001a      	movs	r2, r3
 80003d2:	6a3b      	ldr	r3, [r7, #32]
 80003d4:	18d2      	adds	r2, r2, r3
 80003d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000444 <ws2812SetColor+0x140>)
 80003d8:	18d2      	adds	r2, r2, r3
 80003da:	2310      	movs	r3, #16
 80003dc:	18fb      	adds	r3, r7, r3
 80003de:	0010      	movs	r0, r2
 80003e0:	0019      	movs	r1, r3
 80003e2:	2308      	movs	r3, #8
 80003e4:	001a      	movs	r2, r3
 80003e6:	f003 f813 	bl	8003410 <memcpy>
    memcpy(&led_buf[offset + index*24 + 8*1], r_bit, 8*1);
 80003ea:	687a      	ldr	r2, [r7, #4]
 80003ec:	0013      	movs	r3, r2
 80003ee:	005b      	lsls	r3, r3, #1
 80003f0:	189b      	adds	r3, r3, r2
 80003f2:	00db      	lsls	r3, r3, #3
 80003f4:	001a      	movs	r2, r3
 80003f6:	6a3b      	ldr	r3, [r7, #32]
 80003f8:	18d3      	adds	r3, r2, r3
 80003fa:	3308      	adds	r3, #8
 80003fc:	001a      	movs	r2, r3
 80003fe:	4b11      	ldr	r3, [pc, #68]	@ (8000444 <ws2812SetColor+0x140>)
 8000400:	18d2      	adds	r2, r2, r3
 8000402:	2318      	movs	r3, #24
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	0010      	movs	r0, r2
 8000408:	0019      	movs	r1, r3
 800040a:	2308      	movs	r3, #8
 800040c:	001a      	movs	r2, r3
 800040e:	f002 ffff 	bl	8003410 <memcpy>
    memcpy(&led_buf[offset + index*24 + 8*2], b_bit, 8*1);
 8000412:	687a      	ldr	r2, [r7, #4]
 8000414:	0013      	movs	r3, r2
 8000416:	005b      	lsls	r3, r3, #1
 8000418:	189b      	adds	r3, r3, r2
 800041a:	00db      	lsls	r3, r3, #3
 800041c:	001a      	movs	r2, r3
 800041e:	6a3b      	ldr	r3, [r7, #32]
 8000420:	18d3      	adds	r3, r2, r3
 8000422:	3310      	adds	r3, #16
 8000424:	001a      	movs	r2, r3
 8000426:	4b07      	ldr	r3, [pc, #28]	@ (8000444 <ws2812SetColor+0x140>)
 8000428:	18d2      	adds	r2, r2, r3
 800042a:	2308      	movs	r3, #8
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	0010      	movs	r0, r2
 8000430:	0019      	movs	r1, r3
 8000432:	2308      	movs	r3, #8
 8000434:	001a      	movs	r2, r3
 8000436:	f002 ffeb 	bl	8003410 <memcpy>
}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	b00b      	add	sp, #44	@ 0x2c
 8000440:	bd90      	pop	{r4, r7, pc}
 8000442:	46c0      	nop			@ (mov r8, r8)
 8000444:	2000002c 	.word	0x2000002c

08000448 <offLed>:

void offLed() {
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
	for(int i=0; i<21; i++)
 800044e:	2300      	movs	r3, #0
 8000450:	607b      	str	r3, [r7, #4]
 8000452:	e008      	b.n	8000466 <offLed+0x1e>
	{
		ws2812SetColor(i, 0, 0, 0);
 8000454:	6878      	ldr	r0, [r7, #4]
 8000456:	2300      	movs	r3, #0
 8000458:	2200      	movs	r2, #0
 800045a:	2100      	movs	r1, #0
 800045c:	f7ff ff52 	bl	8000304 <ws2812SetColor>
	for(int i=0; i<21; i++)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	3301      	adds	r3, #1
 8000464:	607b      	str	r3, [r7, #4]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	2b14      	cmp	r3, #20
 800046a:	ddf3      	ble.n	8000454 <offLed+0xc>
	}
}
 800046c:	46c0      	nop			@ (mov r8, r8)
 800046e:	46c0      	nop			@ (mov r8, r8)
 8000470:	46bd      	mov	sp, r7
 8000472:	b002      	add	sp, #8
 8000474:	bd80      	pop	{r7, pc}

08000476 <rgbLed>:

void rgbLed() {
 8000476:	b580      	push	{r7, lr}
 8000478:	b082      	sub	sp, #8
 800047a:	af00      	add	r7, sp, #0
	for(int i=0; i<3; i++)
 800047c:	2300      	movs	r3, #0
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	e02b      	b.n	80004da <rgbLed+0x64>
	{
		for(int j=0; j<21; j++)
 8000482:	2300      	movs	r3, #0
 8000484:	603b      	str	r3, [r7, #0]
 8000486:	e022      	b.n	80004ce <rgbLed+0x58>
		{
			if(i==0) {
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d106      	bne.n	800049c <rgbLed+0x26>
			  ws2812SetColor(j, 255, 0, 0);
 800048e:	6838      	ldr	r0, [r7, #0]
 8000490:	2300      	movs	r3, #0
 8000492:	2200      	movs	r2, #0
 8000494:	21ff      	movs	r1, #255	@ 0xff
 8000496:	f7ff ff35 	bl	8000304 <ws2812SetColor>
 800049a:	e012      	b.n	80004c2 <rgbLed+0x4c>
			} else if(i==1) {
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d106      	bne.n	80004b0 <rgbLed+0x3a>
			  ws2812SetColor(j, 0, 255, 0);
 80004a2:	6838      	ldr	r0, [r7, #0]
 80004a4:	2300      	movs	r3, #0
 80004a6:	22ff      	movs	r2, #255	@ 0xff
 80004a8:	2100      	movs	r1, #0
 80004aa:	f7ff ff2b 	bl	8000304 <ws2812SetColor>
 80004ae:	e008      	b.n	80004c2 <rgbLed+0x4c>
			} else if(i==2) {
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	2b02      	cmp	r3, #2
 80004b4:	d105      	bne.n	80004c2 <rgbLed+0x4c>
			  ws2812SetColor(j, 0, 0, 255);
 80004b6:	6838      	ldr	r0, [r7, #0]
 80004b8:	23ff      	movs	r3, #255	@ 0xff
 80004ba:	2200      	movs	r2, #0
 80004bc:	2100      	movs	r1, #0
 80004be:	f7ff ff21 	bl	8000304 <ws2812SetColor>
			}
			HAL_Delay(20);
 80004c2:	2014      	movs	r0, #20
 80004c4:	f000 fb18 	bl	8000af8 <HAL_Delay>
		for(int j=0; j<21; j++)
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	3301      	adds	r3, #1
 80004cc:	603b      	str	r3, [r7, #0]
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	2b14      	cmp	r3, #20
 80004d2:	ddd9      	ble.n	8000488 <rgbLed+0x12>
	for(int i=0; i<3; i++)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	3301      	adds	r3, #1
 80004d8:	607b      	str	r3, [r7, #4]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2b02      	cmp	r3, #2
 80004de:	ddd0      	ble.n	8000482 <rgbLed+0xc>
		}
	}
	offLed();
 80004e0:	f7ff ffb2 	bl	8000448 <offLed>
}
 80004e4:	46c0      	nop			@ (mov r8, r8)
 80004e6:	46bd      	mov	sp, r7
 80004e8:	b002      	add	sp, #8
 80004ea:	bd80      	pop	{r7, pc}

080004ec <sirenLed>:

void sirenLed() {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0
	for(int n=0; n<10; n++)
 80004f2:	2300      	movs	r3, #0
 80004f4:	617b      	str	r3, [r7, #20]
 80004f6:	e044      	b.n	8000582 <sirenLed+0x96>
	{
		for(int i=0; i<8; i++)
 80004f8:	2300      	movs	r3, #0
 80004fa:	613b      	str	r3, [r7, #16]
 80004fc:	e008      	b.n	8000510 <sirenLed+0x24>
		{
			ws2812SetColor(i, 255, 0, 0);
 80004fe:	6938      	ldr	r0, [r7, #16]
 8000500:	2300      	movs	r3, #0
 8000502:	2200      	movs	r2, #0
 8000504:	21ff      	movs	r1, #255	@ 0xff
 8000506:	f7ff fefd 	bl	8000304 <ws2812SetColor>
		for(int i=0; i<8; i++)
 800050a:	693b      	ldr	r3, [r7, #16]
 800050c:	3301      	adds	r3, #1
 800050e:	613b      	str	r3, [r7, #16]
 8000510:	693b      	ldr	r3, [r7, #16]
 8000512:	2b07      	cmp	r3, #7
 8000514:	ddf3      	ble.n	80004fe <sirenLed+0x12>
		}
		for(int i=8; i<21; i++)
 8000516:	2308      	movs	r3, #8
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	e008      	b.n	800052e <sirenLed+0x42>
		{
			ws2812SetColor(i, 0, 0, 255);
 800051c:	68f8      	ldr	r0, [r7, #12]
 800051e:	23ff      	movs	r3, #255	@ 0xff
 8000520:	2200      	movs	r2, #0
 8000522:	2100      	movs	r1, #0
 8000524:	f7ff feee 	bl	8000304 <ws2812SetColor>
		for(int i=8; i<21; i++)
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	3301      	adds	r3, #1
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	2b14      	cmp	r3, #20
 8000532:	ddf3      	ble.n	800051c <sirenLed+0x30>
		}
		HAL_Delay(100);
 8000534:	2064      	movs	r0, #100	@ 0x64
 8000536:	f000 fadf 	bl	8000af8 <HAL_Delay>
		for(int i=0; i<8; i++)
 800053a:	2300      	movs	r3, #0
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	e008      	b.n	8000552 <sirenLed+0x66>
		{
			ws2812SetColor(i, 0, 0, 255);
 8000540:	68b8      	ldr	r0, [r7, #8]
 8000542:	23ff      	movs	r3, #255	@ 0xff
 8000544:	2200      	movs	r2, #0
 8000546:	2100      	movs	r1, #0
 8000548:	f7ff fedc 	bl	8000304 <ws2812SetColor>
		for(int i=0; i<8; i++)
 800054c:	68bb      	ldr	r3, [r7, #8]
 800054e:	3301      	adds	r3, #1
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	2b07      	cmp	r3, #7
 8000556:	ddf3      	ble.n	8000540 <sirenLed+0x54>
		}
		for(int i=8; i<21; i++)
 8000558:	2308      	movs	r3, #8
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	e008      	b.n	8000570 <sirenLed+0x84>
		{
			ws2812SetColor(i, 255, 0, 0);
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	2300      	movs	r3, #0
 8000562:	2200      	movs	r2, #0
 8000564:	21ff      	movs	r1, #255	@ 0xff
 8000566:	f7ff fecd 	bl	8000304 <ws2812SetColor>
		for(int i=8; i<21; i++)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	3301      	adds	r3, #1
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	2b14      	cmp	r3, #20
 8000574:	ddf3      	ble.n	800055e <sirenLed+0x72>
		}
		HAL_Delay(100);
 8000576:	2064      	movs	r0, #100	@ 0x64
 8000578:	f000 fabe 	bl	8000af8 <HAL_Delay>
	for(int n=0; n<10; n++)
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	3301      	adds	r3, #1
 8000580:	617b      	str	r3, [r7, #20]
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	2b09      	cmp	r3, #9
 8000586:	ddb7      	ble.n	80004f8 <sirenLed+0xc>
	}
	offLed();
 8000588:	f7ff ff5e 	bl	8000448 <offLed>
}
 800058c:	46c0      	nop			@ (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	b006      	add	sp, #24
 8000592:	bd80      	pop	{r7, pc}

08000594 <blinkLed>:

void blinkLed() {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
	for(int n=0; n<3; n++)
 800059a:	2300      	movs	r3, #0
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	e019      	b.n	80005d4 <blinkLed+0x40>
	{
		for(int i=0; i<21; i++)
 80005a0:	2300      	movs	r3, #0
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	e008      	b.n	80005b8 <blinkLed+0x24>
		{
			ws2812SetColor(i, 255, 255, 255);
 80005a6:	6838      	ldr	r0, [r7, #0]
 80005a8:	23ff      	movs	r3, #255	@ 0xff
 80005aa:	22ff      	movs	r2, #255	@ 0xff
 80005ac:	21ff      	movs	r1, #255	@ 0xff
 80005ae:	f7ff fea9 	bl	8000304 <ws2812SetColor>
		for(int i=0; i<21; i++)
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	3301      	adds	r3, #1
 80005b6:	603b      	str	r3, [r7, #0]
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	2b14      	cmp	r3, #20
 80005bc:	ddf3      	ble.n	80005a6 <blinkLed+0x12>
		}
		HAL_Delay(100);
 80005be:	2064      	movs	r0, #100	@ 0x64
 80005c0:	f000 fa9a 	bl	8000af8 <HAL_Delay>
		offLed();
 80005c4:	f7ff ff40 	bl	8000448 <offLed>
		HAL_Delay(100);
 80005c8:	2064      	movs	r0, #100	@ 0x64
 80005ca:	f000 fa95 	bl	8000af8 <HAL_Delay>
	for(int n=0; n<3; n++)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	3301      	adds	r3, #1
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2b02      	cmp	r3, #2
 80005d8:	dde2      	ble.n	80005a0 <blinkLed+0xc>
	}
}
 80005da:	46c0      	nop			@ (mov r8, r8)
 80005dc:	46c0      	nop			@ (mov r8, r8)
 80005de:	46bd      	mov	sp, r7
 80005e0:	b002      	add	sp, #8
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f000 fa00 	bl	80009ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f813 	bl	8000616 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f7ff fe32 	bl	8000258 <MX_GPIO_Init>
  MX_DMA_Init();
 80005f4:	f7ff fe12 	bl	800021c <MX_DMA_Init>
  MX_TIM3_Init();
 80005f8:	f000 f8c6 	bl	8000788 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  ws2812Init();
 80005fc:	f7ff fe4e 	bl	800029c <ws2812Init>
  ws2812Begin(21);
 8000600:	2015      	movs	r0, #21
 8000602:	f7ff fe5f 	bl	80002c4 <ws2812Begin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  blinkLed();
 8000606:	f7ff ffc5 	bl	8000594 <blinkLed>
	  rgbLed();
 800060a:	f7ff ff34 	bl	8000476 <rgbLed>
	  sirenLed();
 800060e:	f7ff ff6d 	bl	80004ec <sirenLed>
	  blinkLed();
 8000612:	46c0      	nop			@ (mov r8, r8)
 8000614:	e7f7      	b.n	8000606 <main+0x22>

08000616 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000616:	b590      	push	{r4, r7, lr}
 8000618:	b095      	sub	sp, #84	@ 0x54
 800061a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061c:	2414      	movs	r4, #20
 800061e:	193b      	adds	r3, r7, r4
 8000620:	0018      	movs	r0, r3
 8000622:	233c      	movs	r3, #60	@ 0x3c
 8000624:	001a      	movs	r2, r3
 8000626:	2100      	movs	r1, #0
 8000628:	f002 fec6 	bl	80033b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	0018      	movs	r0, r3
 8000630:	2310      	movs	r3, #16
 8000632:	001a      	movs	r2, r3
 8000634:	2100      	movs	r1, #0
 8000636:	f002 febf 	bl	80033b8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063a:	2380      	movs	r3, #128	@ 0x80
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	0018      	movs	r0, r3
 8000640:	f000 ff7e 	bl	8001540 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000644:	193b      	adds	r3, r7, r4
 8000646:	2202      	movs	r2, #2
 8000648:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064a:	193b      	adds	r3, r7, r4
 800064c:	2280      	movs	r2, #128	@ 0x80
 800064e:	0052      	lsls	r2, r2, #1
 8000650:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV128;
 8000652:	193b      	adds	r3, r7, r4
 8000654:	22e0      	movs	r2, #224	@ 0xe0
 8000656:	0192      	lsls	r2, r2, #6
 8000658:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065a:	0021      	movs	r1, r4
 800065c:	187b      	adds	r3, r7, r1
 800065e:	2240      	movs	r2, #64	@ 0x40
 8000660:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000662:	187b      	adds	r3, r7, r1
 8000664:	2202      	movs	r2, #2
 8000666:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000668:	187b      	adds	r3, r7, r1
 800066a:	2202      	movs	r2, #2
 800066c:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800066e:	187b      	adds	r3, r7, r1
 8000670:	2200      	movs	r2, #0
 8000672:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000674:	187b      	adds	r3, r7, r1
 8000676:	2208      	movs	r2, #8
 8000678:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067a:	187b      	adds	r3, r7, r1
 800067c:	2280      	movs	r2, #128	@ 0x80
 800067e:	0292      	lsls	r2, r2, #10
 8000680:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000682:	187b      	adds	r3, r7, r1
 8000684:	2280      	movs	r2, #128	@ 0x80
 8000686:	0492      	lsls	r2, r2, #18
 8000688:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2280      	movs	r2, #128	@ 0x80
 800068e:	0592      	lsls	r2, r2, #22
 8000690:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	187b      	adds	r3, r7, r1
 8000694:	0018      	movs	r0, r3
 8000696:	f000 ff93 	bl	80015c0 <HAL_RCC_OscConfig>
 800069a:	1e03      	subs	r3, r0, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800069e:	f000 f819 	bl	80006d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	2207      	movs	r2, #7
 80006a6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2202      	movs	r2, #2
 80006ac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2102      	movs	r1, #2
 80006be:	0018      	movs	r0, r3
 80006c0:	f001 fade 	bl	8001c80 <HAL_RCC_ClockConfig>
 80006c4:	1e03      	subs	r3, r0, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006c8:	f000 f804 	bl	80006d4 <Error_Handler>
  }
}
 80006cc:	46c0      	nop			@ (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	b015      	add	sp, #84	@ 0x54
 80006d2:	bd90      	pop	{r4, r7, pc}

080006d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d8:	b672      	cpsid	i
}
 80006da:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006dc:	46c0      	nop			@ (mov r8, r8)
 80006de:	e7fd      	b.n	80006dc <Error_Handler+0x8>

080006e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e6:	4b11      	ldr	r3, [pc, #68]	@ (800072c <HAL_MspInit+0x4c>)
 80006e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006ea:	4b10      	ldr	r3, [pc, #64]	@ (800072c <HAL_MspInit+0x4c>)
 80006ec:	2101      	movs	r1, #1
 80006ee:	430a      	orrs	r2, r1
 80006f0:	641a      	str	r2, [r3, #64]	@ 0x40
 80006f2:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <HAL_MspInit+0x4c>)
 80006f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f6:	2201      	movs	r2, #1
 80006f8:	4013      	ands	r3, r2
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fe:	4b0b      	ldr	r3, [pc, #44]	@ (800072c <HAL_MspInit+0x4c>)
 8000700:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000702:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <HAL_MspInit+0x4c>)
 8000704:	2180      	movs	r1, #128	@ 0x80
 8000706:	0549      	lsls	r1, r1, #21
 8000708:	430a      	orrs	r2, r1
 800070a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800070c:	4b07      	ldr	r3, [pc, #28]	@ (800072c <HAL_MspInit+0x4c>)
 800070e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000710:	2380      	movs	r3, #128	@ 0x80
 8000712:	055b      	lsls	r3, r3, #21
 8000714:	4013      	ands	r3, r2
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800071a:	23c0      	movs	r3, #192	@ 0xc0
 800071c:	00db      	lsls	r3, r3, #3
 800071e:	0018      	movs	r0, r3
 8000720:	f000 fa0e 	bl	8000b40 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000724:	46c0      	nop			@ (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	b002      	add	sp, #8
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40021000 	.word	0x40021000

08000730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000734:	46c0      	nop			@ (mov r8, r8)
 8000736:	e7fd      	b.n	8000734 <NMI_Handler+0x4>

08000738 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073c:	46c0      	nop			@ (mov r8, r8)
 800073e:	e7fd      	b.n	800073c <HardFault_Handler+0x4>

08000740 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000744:	46c0      	nop			@ (mov r8, r8)
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800074e:	46c0      	nop			@ (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000758:	f000 f9b2 	bl	8000ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800075c:	46c0      	nop			@ (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
	...

08000764 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 8000768:	4b03      	ldr	r3, [pc, #12]	@ (8000778 <DMA1_Channel1_IRQHandler+0x14>)
 800076a:	0018      	movs	r0, r3
 800076c:	f000 fc0e 	bl	8000f8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000770:	46c0      	nop			@ (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			@ (mov r8, r8)
 8000778:	2000038c 	.word	0x2000038c

0800077c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000780:	46c0      	nop			@ (mov r8, r8)
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim3_ch3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08e      	sub	sp, #56	@ 0x38
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078e:	2328      	movs	r3, #40	@ 0x28
 8000790:	18fb      	adds	r3, r7, r3
 8000792:	0018      	movs	r0, r3
 8000794:	2310      	movs	r3, #16
 8000796:	001a      	movs	r2, r3
 8000798:	2100      	movs	r1, #0
 800079a:	f002 fe0d 	bl	80033b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079e:	231c      	movs	r3, #28
 80007a0:	18fb      	adds	r3, r7, r3
 80007a2:	0018      	movs	r0, r3
 80007a4:	230c      	movs	r3, #12
 80007a6:	001a      	movs	r2, r3
 80007a8:	2100      	movs	r1, #0
 80007aa:	f002 fe05 	bl	80033b8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ae:	003b      	movs	r3, r7
 80007b0:	0018      	movs	r0, r3
 80007b2:	231c      	movs	r3, #28
 80007b4:	001a      	movs	r2, r3
 80007b6:	2100      	movs	r1, #0
 80007b8:	f002 fdfe 	bl	80033b8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007bc:	4b2f      	ldr	r3, [pc, #188]	@ (800087c <MX_TIM3_Init+0xf4>)
 80007be:	4a30      	ldr	r2, [pc, #192]	@ (8000880 <MX_TIM3_Init+0xf8>)
 80007c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007c2:	4b2e      	ldr	r3, [pc, #184]	@ (800087c <MX_TIM3_Init+0xf4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c8:	4b2c      	ldr	r3, [pc, #176]	@ (800087c <MX_TIM3_Init+0xf4>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 80-1;
 80007ce:	4b2b      	ldr	r3, [pc, #172]	@ (800087c <MX_TIM3_Init+0xf4>)
 80007d0:	224f      	movs	r2, #79	@ 0x4f
 80007d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d4:	4b29      	ldr	r3, [pc, #164]	@ (800087c <MX_TIM3_Init+0xf4>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007da:	4b28      	ldr	r3, [pc, #160]	@ (800087c <MX_TIM3_Init+0xf4>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007e0:	4b26      	ldr	r3, [pc, #152]	@ (800087c <MX_TIM3_Init+0xf4>)
 80007e2:	0018      	movs	r0, r3
 80007e4:	f001 fbd6 	bl	8001f94 <HAL_TIM_Base_Init>
 80007e8:	1e03      	subs	r3, r0, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80007ec:	f7ff ff72 	bl	80006d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f0:	2128      	movs	r1, #40	@ 0x28
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2280      	movs	r2, #128	@ 0x80
 80007f6:	0152      	lsls	r2, r2, #5
 80007f8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007fa:	187a      	adds	r2, r7, r1
 80007fc:	4b1f      	ldr	r3, [pc, #124]	@ (800087c <MX_TIM3_Init+0xf4>)
 80007fe:	0011      	movs	r1, r2
 8000800:	0018      	movs	r0, r3
 8000802:	f001 ff85 	bl	8002710 <HAL_TIM_ConfigClockSource>
 8000806:	1e03      	subs	r3, r0, #0
 8000808:	d001      	beq.n	800080e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800080a:	f7ff ff63 	bl	80006d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800080e:	4b1b      	ldr	r3, [pc, #108]	@ (800087c <MX_TIM3_Init+0xf4>)
 8000810:	0018      	movs	r0, r3
 8000812:	f001 fc17 	bl	8002044 <HAL_TIM_PWM_Init>
 8000816:	1e03      	subs	r3, r0, #0
 8000818:	d001      	beq.n	800081e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800081a:	f7ff ff5b 	bl	80006d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081e:	211c      	movs	r1, #28
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800082c:	187a      	adds	r2, r7, r1
 800082e:	4b13      	ldr	r3, [pc, #76]	@ (800087c <MX_TIM3_Init+0xf4>)
 8000830:	0011      	movs	r1, r2
 8000832:	0018      	movs	r0, r3
 8000834:	f002 fd4a 	bl	80032cc <HAL_TIMEx_MasterConfigSynchronization>
 8000838:	1e03      	subs	r3, r0, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800083c:	f7ff ff4a 	bl	80006d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000840:	003b      	movs	r3, r7
 8000842:	2260      	movs	r2, #96	@ 0x60
 8000844:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000846:	003b      	movs	r3, r7
 8000848:	2200      	movs	r2, #0
 800084a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800084c:	003b      	movs	r3, r7
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000852:	003b      	movs	r3, r7
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000858:	0039      	movs	r1, r7
 800085a:	4b08      	ldr	r3, [pc, #32]	@ (800087c <MX_TIM3_Init+0xf4>)
 800085c:	2208      	movs	r2, #8
 800085e:	0018      	movs	r0, r3
 8000860:	f001 fe56 	bl	8002510 <HAL_TIM_PWM_ConfigChannel>
 8000864:	1e03      	subs	r3, r0, #0
 8000866:	d001      	beq.n	800086c <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000868:	f7ff ff34 	bl	80006d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800086c:	4b03      	ldr	r3, [pc, #12]	@ (800087c <MX_TIM3_Init+0xf4>)
 800086e:	0018      	movs	r0, r3
 8000870:	f000 f854 	bl	800091c <HAL_TIM_MspPostInit>

}
 8000874:	46c0      	nop			@ (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	b00e      	add	sp, #56	@ 0x38
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000340 	.word	0x20000340
 8000880:	40000400 	.word	0x40000400

08000884 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a1e      	ldr	r2, [pc, #120]	@ (800090c <HAL_TIM_Base_MspInit+0x88>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d135      	bne.n	8000902 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000896:	4b1e      	ldr	r3, [pc, #120]	@ (8000910 <HAL_TIM_Base_MspInit+0x8c>)
 8000898:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800089a:	4b1d      	ldr	r3, [pc, #116]	@ (8000910 <HAL_TIM_Base_MspInit+0x8c>)
 800089c:	2102      	movs	r1, #2
 800089e:	430a      	orrs	r2, r1
 80008a0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000910 <HAL_TIM_Base_MspInit+0x8c>)
 80008a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80008a6:	2202      	movs	r2, #2
 80008a8:	4013      	ands	r3, r2
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH3 Init */
    hdma_tim3_ch3.Instance = DMA1_Channel1;
 80008ae:	4b19      	ldr	r3, [pc, #100]	@ (8000914 <HAL_TIM_Base_MspInit+0x90>)
 80008b0:	4a19      	ldr	r2, [pc, #100]	@ (8000918 <HAL_TIM_Base_MspInit+0x94>)
 80008b2:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Request = DMA_REQUEST_TIM3_CH3;
 80008b4:	4b17      	ldr	r3, [pc, #92]	@ (8000914 <HAL_TIM_Base_MspInit+0x90>)
 80008b6:	2222      	movs	r2, #34	@ 0x22
 80008b8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008ba:	4b16      	ldr	r3, [pc, #88]	@ (8000914 <HAL_TIM_Base_MspInit+0x90>)
 80008bc:	2210      	movs	r2, #16
 80008be:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80008c0:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <HAL_TIM_Base_MspInit+0x90>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80008c6:	4b13      	ldr	r3, [pc, #76]	@ (8000914 <HAL_TIM_Base_MspInit+0x90>)
 80008c8:	2280      	movs	r2, #128	@ 0x80
 80008ca:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008cc:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <HAL_TIM_Base_MspInit+0x90>)
 80008ce:	2280      	movs	r2, #128	@ 0x80
 80008d0:	0052      	lsls	r2, r2, #1
 80008d2:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <HAL_TIM_Base_MspInit+0x90>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_CIRCULAR;
 80008da:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <HAL_TIM_Base_MspInit+0x90>)
 80008dc:	2220      	movs	r2, #32
 80008de:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <HAL_TIM_Base_MspInit+0x90>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 80008e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000914 <HAL_TIM_Base_MspInit+0x90>)
 80008e8:	0018      	movs	r0, r3
 80008ea:	f000 fa1d 	bl	8000d28 <HAL_DMA_Init>
 80008ee:	1e03      	subs	r3, r0, #0
 80008f0:	d001      	beq.n	80008f6 <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 80008f2:	f7ff feef 	bl	80006d4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a06      	ldr	r2, [pc, #24]	@ (8000914 <HAL_TIM_Base_MspInit+0x90>)
 80008fa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008fc:	4b05      	ldr	r3, [pc, #20]	@ (8000914 <HAL_TIM_Base_MspInit+0x90>)
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	b004      	add	sp, #16
 8000908:	bd80      	pop	{r7, pc}
 800090a:	46c0      	nop			@ (mov r8, r8)
 800090c:	40000400 	.word	0x40000400
 8000910:	40021000 	.word	0x40021000
 8000914:	2000038c 	.word	0x2000038c
 8000918:	40020008 	.word	0x40020008

0800091c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b089      	sub	sp, #36	@ 0x24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	240c      	movs	r4, #12
 8000926:	193b      	adds	r3, r7, r4
 8000928:	0018      	movs	r0, r3
 800092a:	2314      	movs	r3, #20
 800092c:	001a      	movs	r2, r3
 800092e:	2100      	movs	r1, #0
 8000930:	f002 fd42 	bl	80033b8 <memset>
  if(timHandle->Instance==TIM3)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a14      	ldr	r2, [pc, #80]	@ (800098c <HAL_TIM_MspPostInit+0x70>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d122      	bne.n	8000984 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800093e:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <HAL_TIM_MspPostInit+0x74>)
 8000940:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000942:	4b13      	ldr	r3, [pc, #76]	@ (8000990 <HAL_TIM_MspPostInit+0x74>)
 8000944:	2104      	movs	r1, #4
 8000946:	430a      	orrs	r2, r1
 8000948:	635a      	str	r2, [r3, #52]	@ 0x34
 800094a:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <HAL_TIM_MspPostInit+0x74>)
 800094c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800094e:	2204      	movs	r2, #4
 8000950:	4013      	ands	r3, r2
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000956:	193b      	adds	r3, r7, r4
 8000958:	2280      	movs	r2, #128	@ 0x80
 800095a:	0052      	lsls	r2, r2, #1
 800095c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	0021      	movs	r1, r4
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2202      	movs	r2, #2
 8000964:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	187b      	adds	r3, r7, r1
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000972:	187b      	adds	r3, r7, r1
 8000974:	2201      	movs	r2, #1
 8000976:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000978:	187b      	adds	r3, r7, r1
 800097a:	4a06      	ldr	r2, [pc, #24]	@ (8000994 <HAL_TIM_MspPostInit+0x78>)
 800097c:	0019      	movs	r1, r3
 800097e:	0010      	movs	r0, r2
 8000980:	f000 fc72 	bl	8001268 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000984:	46c0      	nop			@ (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	b009      	add	sp, #36	@ 0x24
 800098a:	bd90      	pop	{r4, r7, pc}
 800098c:	40000400 	.word	0x40000400
 8000990:	40021000 	.word	0x40021000
 8000994:	50000800 	.word	0x50000800

08000998 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000998:	480d      	ldr	r0, [pc, #52]	@ (80009d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800099a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800099c:	f7ff feee 	bl	800077c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a0:	480c      	ldr	r0, [pc, #48]	@ (80009d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009a2:	490d      	ldr	r1, [pc, #52]	@ (80009d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009a4:	4a0d      	ldr	r2, [pc, #52]	@ (80009dc <LoopForever+0xe>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a8:	e002      	b.n	80009b0 <LoopCopyDataInit>

080009aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ae:	3304      	adds	r3, #4

080009b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b4:	d3f9      	bcc.n	80009aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b6:	4a0a      	ldr	r2, [pc, #40]	@ (80009e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009b8:	4c0a      	ldr	r4, [pc, #40]	@ (80009e4 <LoopForever+0x16>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009bc:	e001      	b.n	80009c2 <LoopFillZerobss>

080009be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c0:	3204      	adds	r2, #4

080009c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c4:	d3fb      	bcc.n	80009be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009c6:	f002 fcff 	bl	80033c8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80009ca:	f7ff fe0b 	bl	80005e4 <main>

080009ce <LoopForever>:

LoopForever:
  b LoopForever
 80009ce:	e7fe      	b.n	80009ce <LoopForever>
  ldr   r0, =_estack
 80009d0:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80009d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009dc:	080034d8 	.word	0x080034d8
  ldr r2, =_sbss
 80009e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009e4:	200003f0 	.word	0x200003f0

080009e8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e8:	e7fe      	b.n	80009e8 <ADC1_COMP_IRQHandler>
	...

080009ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009f2:	1dfb      	adds	r3, r7, #7
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000a28 <HAL_Init+0x3c>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000a28 <HAL_Init+0x3c>)
 80009fe:	2180      	movs	r1, #128	@ 0x80
 8000a00:	0049      	lsls	r1, r1, #1
 8000a02:	430a      	orrs	r2, r1
 8000a04:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a06:	2003      	movs	r0, #3
 8000a08:	f000 f810 	bl	8000a2c <HAL_InitTick>
 8000a0c:	1e03      	subs	r3, r0, #0
 8000a0e:	d003      	beq.n	8000a18 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a10:	1dfb      	adds	r3, r7, #7
 8000a12:	2201      	movs	r2, #1
 8000a14:	701a      	strb	r2, [r3, #0]
 8000a16:	e001      	b.n	8000a1c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a18:	f7ff fe62 	bl	80006e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a1c:	1dfb      	adds	r3, r7, #7
 8000a1e:	781b      	ldrb	r3, [r3, #0]
}
 8000a20:	0018      	movs	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b002      	add	sp, #8
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40022000 	.word	0x40022000

08000a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a34:	230f      	movs	r3, #15
 8000a36:	18fb      	adds	r3, r7, r3
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab4 <HAL_InitTick+0x88>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d02b      	beq.n	8000a9c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000a44:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab8 <HAL_InitTick+0x8c>)
 8000a46:	681c      	ldr	r4, [r3, #0]
 8000a48:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab4 <HAL_InitTick+0x88>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	0019      	movs	r1, r3
 8000a4e:	23fa      	movs	r3, #250	@ 0xfa
 8000a50:	0098      	lsls	r0, r3, #2
 8000a52:	f7ff fb57 	bl	8000104 <__udivsi3>
 8000a56:	0003      	movs	r3, r0
 8000a58:	0019      	movs	r1, r3
 8000a5a:	0020      	movs	r0, r4
 8000a5c:	f7ff fb52 	bl	8000104 <__udivsi3>
 8000a60:	0003      	movs	r3, r0
 8000a62:	0018      	movs	r0, r3
 8000a64:	f000 f953 	bl	8000d0e <HAL_SYSTICK_Config>
 8000a68:	1e03      	subs	r3, r0, #0
 8000a6a:	d112      	bne.n	8000a92 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b03      	cmp	r3, #3
 8000a70:	d80a      	bhi.n	8000a88 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	2301      	movs	r3, #1
 8000a76:	425b      	negs	r3, r3
 8000a78:	2200      	movs	r2, #0
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f000 f922 	bl	8000cc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a80:	4b0e      	ldr	r3, [pc, #56]	@ (8000abc <HAL_InitTick+0x90>)
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	e00d      	b.n	8000aa4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000a88:	230f      	movs	r3, #15
 8000a8a:	18fb      	adds	r3, r7, r3
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	701a      	strb	r2, [r3, #0]
 8000a90:	e008      	b.n	8000aa4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a92:	230f      	movs	r3, #15
 8000a94:	18fb      	adds	r3, r7, r3
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]
 8000a9a:	e003      	b.n	8000aa4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a9c:	230f      	movs	r3, #15
 8000a9e:	18fb      	adds	r3, r7, r3
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000aa4:	230f      	movs	r3, #15
 8000aa6:	18fb      	adds	r3, r7, r3
 8000aa8:	781b      	ldrb	r3, [r3, #0]
}
 8000aaa:	0018      	movs	r0, r3
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b005      	add	sp, #20
 8000ab0:	bd90      	pop	{r4, r7, pc}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	20000004 	.word	0x20000004

08000ac0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ac4:	4b05      	ldr	r3, [pc, #20]	@ (8000adc <HAL_IncTick+0x1c>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	001a      	movs	r2, r3
 8000aca:	4b05      	ldr	r3, [pc, #20]	@ (8000ae0 <HAL_IncTick+0x20>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	18d2      	adds	r2, r2, r3
 8000ad0:	4b03      	ldr	r3, [pc, #12]	@ (8000ae0 <HAL_IncTick+0x20>)
 8000ad2:	601a      	str	r2, [r3, #0]
}
 8000ad4:	46c0      	nop			@ (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	46c0      	nop			@ (mov r8, r8)
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	200003ec 	.word	0x200003ec

08000ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae8:	4b02      	ldr	r3, [pc, #8]	@ (8000af4 <HAL_GetTick+0x10>)
 8000aea:	681b      	ldr	r3, [r3, #0]
}
 8000aec:	0018      	movs	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	46c0      	nop			@ (mov r8, r8)
 8000af4:	200003ec 	.word	0x200003ec

08000af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b00:	f7ff fff0 	bl	8000ae4 <HAL_GetTick>
 8000b04:	0003      	movs	r3, r0
 8000b06:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	d005      	beq.n	8000b1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b12:	4b0a      	ldr	r3, [pc, #40]	@ (8000b3c <HAL_Delay+0x44>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	001a      	movs	r2, r3
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	189b      	adds	r3, r3, r2
 8000b1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b1e:	46c0      	nop			@ (mov r8, r8)
 8000b20:	f7ff ffe0 	bl	8000ae4 <HAL_GetTick>
 8000b24:	0002      	movs	r2, r0
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d8f7      	bhi.n	8000b20 <HAL_Delay+0x28>
  {
  }
}
 8000b30:	46c0      	nop			@ (mov r8, r8)
 8000b32:	46c0      	nop			@ (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b004      	add	sp, #16
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			@ (mov r8, r8)
 8000b3c:	20000008 	.word	0x20000008

08000b40 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000b48:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a06      	ldr	r2, [pc, #24]	@ (8000b68 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000b4e:	4013      	ands	r3, r2
 8000b50:	0019      	movs	r1, r3
 8000b52:	4b04      	ldr	r3, [pc, #16]	@ (8000b64 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	430a      	orrs	r2, r1
 8000b58:	601a      	str	r2, [r3, #0]
}
 8000b5a:	46c0      	nop			@ (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b002      	add	sp, #8
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	40010000 	.word	0x40010000
 8000b68:	fffff9ff 	.word	0xfffff9ff

08000b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	0002      	movs	r2, r0
 8000b74:	1dfb      	adds	r3, r7, #7
 8000b76:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b78:	1dfb      	adds	r3, r7, #7
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b7e:	d809      	bhi.n	8000b94 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b80:	1dfb      	adds	r3, r7, #7
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	001a      	movs	r2, r3
 8000b86:	231f      	movs	r3, #31
 8000b88:	401a      	ands	r2, r3
 8000b8a:	4b04      	ldr	r3, [pc, #16]	@ (8000b9c <__NVIC_EnableIRQ+0x30>)
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	4091      	lsls	r1, r2
 8000b90:	000a      	movs	r2, r1
 8000b92:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000b94:	46c0      	nop			@ (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b002      	add	sp, #8
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	e000e100 	.word	0xe000e100

08000ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	0002      	movs	r2, r0
 8000ba8:	6039      	str	r1, [r7, #0]
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bae:	1dfb      	adds	r3, r7, #7
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bb4:	d828      	bhi.n	8000c08 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb6:	4a2f      	ldr	r2, [pc, #188]	@ (8000c74 <__NVIC_SetPriority+0xd4>)
 8000bb8:	1dfb      	adds	r3, r7, #7
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	b25b      	sxtb	r3, r3
 8000bbe:	089b      	lsrs	r3, r3, #2
 8000bc0:	33c0      	adds	r3, #192	@ 0xc0
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	589b      	ldr	r3, [r3, r2]
 8000bc6:	1dfa      	adds	r2, r7, #7
 8000bc8:	7812      	ldrb	r2, [r2, #0]
 8000bca:	0011      	movs	r1, r2
 8000bcc:	2203      	movs	r2, #3
 8000bce:	400a      	ands	r2, r1
 8000bd0:	00d2      	lsls	r2, r2, #3
 8000bd2:	21ff      	movs	r1, #255	@ 0xff
 8000bd4:	4091      	lsls	r1, r2
 8000bd6:	000a      	movs	r2, r1
 8000bd8:	43d2      	mvns	r2, r2
 8000bda:	401a      	ands	r2, r3
 8000bdc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	019b      	lsls	r3, r3, #6
 8000be2:	22ff      	movs	r2, #255	@ 0xff
 8000be4:	401a      	ands	r2, r3
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	0018      	movs	r0, r3
 8000bec:	2303      	movs	r3, #3
 8000bee:	4003      	ands	r3, r0
 8000bf0:	00db      	lsls	r3, r3, #3
 8000bf2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf4:	481f      	ldr	r0, [pc, #124]	@ (8000c74 <__NVIC_SetPriority+0xd4>)
 8000bf6:	1dfb      	adds	r3, r7, #7
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b25b      	sxtb	r3, r3
 8000bfc:	089b      	lsrs	r3, r3, #2
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	33c0      	adds	r3, #192	@ 0xc0
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c06:	e031      	b.n	8000c6c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c08:	4a1b      	ldr	r2, [pc, #108]	@ (8000c78 <__NVIC_SetPriority+0xd8>)
 8000c0a:	1dfb      	adds	r3, r7, #7
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	0019      	movs	r1, r3
 8000c10:	230f      	movs	r3, #15
 8000c12:	400b      	ands	r3, r1
 8000c14:	3b08      	subs	r3, #8
 8000c16:	089b      	lsrs	r3, r3, #2
 8000c18:	3306      	adds	r3, #6
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	18d3      	adds	r3, r2, r3
 8000c1e:	3304      	adds	r3, #4
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	1dfa      	adds	r2, r7, #7
 8000c24:	7812      	ldrb	r2, [r2, #0]
 8000c26:	0011      	movs	r1, r2
 8000c28:	2203      	movs	r2, #3
 8000c2a:	400a      	ands	r2, r1
 8000c2c:	00d2      	lsls	r2, r2, #3
 8000c2e:	21ff      	movs	r1, #255	@ 0xff
 8000c30:	4091      	lsls	r1, r2
 8000c32:	000a      	movs	r2, r1
 8000c34:	43d2      	mvns	r2, r2
 8000c36:	401a      	ands	r2, r3
 8000c38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	019b      	lsls	r3, r3, #6
 8000c3e:	22ff      	movs	r2, #255	@ 0xff
 8000c40:	401a      	ands	r2, r3
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	0018      	movs	r0, r3
 8000c48:	2303      	movs	r3, #3
 8000c4a:	4003      	ands	r3, r0
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c50:	4809      	ldr	r0, [pc, #36]	@ (8000c78 <__NVIC_SetPriority+0xd8>)
 8000c52:	1dfb      	adds	r3, r7, #7
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	001c      	movs	r4, r3
 8000c58:	230f      	movs	r3, #15
 8000c5a:	4023      	ands	r3, r4
 8000c5c:	3b08      	subs	r3, #8
 8000c5e:	089b      	lsrs	r3, r3, #2
 8000c60:	430a      	orrs	r2, r1
 8000c62:	3306      	adds	r3, #6
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	18c3      	adds	r3, r0, r3
 8000c68:	3304      	adds	r3, #4
 8000c6a:	601a      	str	r2, [r3, #0]
}
 8000c6c:	46c0      	nop			@ (mov r8, r8)
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	b003      	add	sp, #12
 8000c72:	bd90      	pop	{r4, r7, pc}
 8000c74:	e000e100 	.word	0xe000e100
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	1e5a      	subs	r2, r3, #1
 8000c88:	2380      	movs	r3, #128	@ 0x80
 8000c8a:	045b      	lsls	r3, r3, #17
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d301      	bcc.n	8000c94 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c90:	2301      	movs	r3, #1
 8000c92:	e010      	b.n	8000cb6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c94:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc0 <SysTick_Config+0x44>)
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	3a01      	subs	r2, #1
 8000c9a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	425b      	negs	r3, r3
 8000ca0:	2103      	movs	r1, #3
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f7ff ff7c 	bl	8000ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca8:	4b05      	ldr	r3, [pc, #20]	@ (8000cc0 <SysTick_Config+0x44>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cae:	4b04      	ldr	r3, [pc, #16]	@ (8000cc0 <SysTick_Config+0x44>)
 8000cb0:	2207      	movs	r2, #7
 8000cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b002      	add	sp, #8
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	46c0      	nop			@ (mov r8, r8)
 8000cc0:	e000e010 	.word	0xe000e010

08000cc4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60b9      	str	r1, [r7, #8]
 8000ccc:	607a      	str	r2, [r7, #4]
 8000cce:	210f      	movs	r1, #15
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	1c02      	adds	r2, r0, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	b25b      	sxtb	r3, r3
 8000cde:	0011      	movs	r1, r2
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f7ff ff5d 	bl	8000ba0 <__NVIC_SetPriority>
}
 8000ce6:	46c0      	nop			@ (mov r8, r8)
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b004      	add	sp, #16
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	0002      	movs	r2, r0
 8000cf6:	1dfb      	adds	r3, r7, #7
 8000cf8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cfa:	1dfb      	adds	r3, r7, #7
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	b25b      	sxtb	r3, r3
 8000d00:	0018      	movs	r0, r3
 8000d02:	f7ff ff33 	bl	8000b6c <__NVIC_EnableIRQ>
}
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b002      	add	sp, #8
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f7ff ffaf 	bl	8000c7c <SysTick_Config>
 8000d1e:	0003      	movs	r3, r0
}
 8000d20:	0018      	movs	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	b002      	add	sp, #8
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d101      	bne.n	8000d3a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e091      	b.n	8000e5e <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	001a      	movs	r2, r3
 8000d40:	4b49      	ldr	r3, [pc, #292]	@ (8000e68 <HAL_DMA_Init+0x140>)
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d810      	bhi.n	8000d68 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a48      	ldr	r2, [pc, #288]	@ (8000e6c <HAL_DMA_Init+0x144>)
 8000d4c:	4694      	mov	ip, r2
 8000d4e:	4463      	add	r3, ip
 8000d50:	2114      	movs	r1, #20
 8000d52:	0018      	movs	r0, r3
 8000d54:	f7ff f9d6 	bl	8000104 <__udivsi3>
 8000d58:	0003      	movs	r3, r0
 8000d5a:	009a      	lsls	r2, r3, #2
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a43      	ldr	r2, [pc, #268]	@ (8000e70 <HAL_DMA_Init+0x148>)
 8000d64:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d66:	e00f      	b.n	8000d88 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a41      	ldr	r2, [pc, #260]	@ (8000e74 <HAL_DMA_Init+0x14c>)
 8000d6e:	4694      	mov	ip, r2
 8000d70:	4463      	add	r3, ip
 8000d72:	2114      	movs	r1, #20
 8000d74:	0018      	movs	r0, r3
 8000d76:	f7ff f9c5 	bl	8000104 <__udivsi3>
 8000d7a:	0003      	movs	r3, r0
 8000d7c:	009a      	lsls	r2, r3, #2
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a3c      	ldr	r2, [pc, #240]	@ (8000e78 <HAL_DMA_Init+0x150>)
 8000d86:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2225      	movs	r2, #37	@ 0x25
 8000d8c:	2102      	movs	r1, #2
 8000d8e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4938      	ldr	r1, [pc, #224]	@ (8000e7c <HAL_DMA_Init+0x154>)
 8000d9c:	400a      	ands	r2, r1
 8000d9e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6819      	ldr	r1, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	689a      	ldr	r2, [r3, #8]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	431a      	orrs	r2, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	691b      	ldr	r3, [r3, #16]
 8000db4:	431a      	orrs	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	431a      	orrs	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	431a      	orrs	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	431a      	orrs	r2, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6a1b      	ldr	r3, [r3, #32]
 8000dcc:	431a      	orrs	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f000 f9d7 	bl	800118c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	689a      	ldr	r2, [r3, #8]
 8000de2:	2380      	movs	r3, #128	@ 0x80
 8000de4:	01db      	lsls	r3, r3, #7
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d102      	bne.n	8000df0 <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000df8:	217f      	movs	r1, #127	@ 0x7f
 8000dfa:	400a      	ands	r2, r1
 8000dfc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000e06:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d011      	beq.n	8000e34 <HAL_DMA_Init+0x10c>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2b04      	cmp	r3, #4
 8000e16:	d80d      	bhi.n	8000e34 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f000 fa00 	bl	8001220 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	e008      	b.n	8000e46 <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2225      	movs	r2, #37	@ 0x25
 8000e50:	2101      	movs	r1, #1
 8000e52:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2224      	movs	r2, #36	@ 0x24
 8000e58:	2100      	movs	r1, #0
 8000e5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	0018      	movs	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b002      	add	sp, #8
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	46c0      	nop			@ (mov r8, r8)
 8000e68:	40020407 	.word	0x40020407
 8000e6c:	bffdfff8 	.word	0xbffdfff8
 8000e70:	40020000 	.word	0x40020000
 8000e74:	bffdfbf8 	.word	0xbffdfbf8
 8000e78:	40020400 	.word	0x40020400
 8000e7c:	ffff800f 	.word	0xffff800f

08000e80 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e8e:	2317      	movs	r3, #23
 8000e90:	18fb      	adds	r3, r7, r3
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	2224      	movs	r2, #36	@ 0x24
 8000e9a:	5c9b      	ldrb	r3, [r3, r2]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d101      	bne.n	8000ea4 <HAL_DMA_Start_IT+0x24>
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	e06f      	b.n	8000f84 <HAL_DMA_Start_IT+0x104>
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2224      	movs	r2, #36	@ 0x24
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2225      	movs	r2, #37	@ 0x25
 8000eb0:	5c9b      	ldrb	r3, [r3, r2]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d157      	bne.n	8000f68 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2225      	movs	r2, #37	@ 0x25
 8000ebc:	2102      	movs	r1, #2
 8000ebe:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	438a      	bics	r2, r1
 8000ed4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	68b9      	ldr	r1, [r7, #8]
 8000edc:	68f8      	ldr	r0, [r7, #12]
 8000ede:	f000 f919 	bl	8001114 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d008      	beq.n	8000efc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	210e      	movs	r1, #14
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	e00f      	b.n	8000f1c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2104      	movs	r1, #4
 8000f08:	438a      	bics	r2, r1
 8000f0a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	210a      	movs	r1, #10
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	2380      	movs	r3, #128	@ 0x80
 8000f24:	025b      	lsls	r3, r3, #9
 8000f26:	4013      	ands	r3, r2
 8000f28:	d008      	beq.n	8000f3c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f34:	2180      	movs	r1, #128	@ 0x80
 8000f36:	0049      	lsls	r1, r1, #1
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d008      	beq.n	8000f56 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f4e:	2180      	movs	r1, #128	@ 0x80
 8000f50:	0049      	lsls	r1, r1, #1
 8000f52:	430a      	orrs	r2, r1
 8000f54:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2101      	movs	r1, #1
 8000f62:	430a      	orrs	r2, r1
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	e00a      	b.n	8000f7e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2280      	movs	r2, #128	@ 0x80
 8000f6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	2224      	movs	r2, #36	@ 0x24
 8000f72:	2100      	movs	r1, #0
 8000f74:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8000f76:	2317      	movs	r3, #23
 8000f78:	18fb      	adds	r3, r7, r3
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000f7e:	2317      	movs	r3, #23
 8000f80:	18fb      	adds	r3, r7, r3
 8000f82:	781b      	ldrb	r3, [r3, #0]
}
 8000f84:	0018      	movs	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b006      	add	sp, #24
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa8:	221c      	movs	r2, #28
 8000faa:	4013      	ands	r3, r2
 8000fac:	2204      	movs	r2, #4
 8000fae:	409a      	lsls	r2, r3
 8000fb0:	0013      	movs	r3, r2
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	d026      	beq.n	8001006 <HAL_DMA_IRQHandler+0x7a>
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	2204      	movs	r2, #4
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	d022      	beq.n	8001006 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2220      	movs	r2, #32
 8000fc8:	4013      	ands	r3, r2
 8000fca:	d107      	bne.n	8000fdc <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2104      	movs	r1, #4
 8000fd8:	438a      	bics	r2, r1
 8000fda:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe0:	221c      	movs	r2, #28
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe8:	2104      	movs	r1, #4
 8000fea:	4091      	lsls	r1, r2
 8000fec:	000a      	movs	r2, r1
 8000fee:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d100      	bne.n	8000ffa <HAL_DMA_IRQHandler+0x6e>
 8000ff8:	e080      	b.n	80010fc <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	0010      	movs	r0, r2
 8001002:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001004:	e07a      	b.n	80010fc <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100a:	221c      	movs	r2, #28
 800100c:	4013      	ands	r3, r2
 800100e:	2202      	movs	r2, #2
 8001010:	409a      	lsls	r2, r3
 8001012:	0013      	movs	r3, r2
 8001014:	68fa      	ldr	r2, [r7, #12]
 8001016:	4013      	ands	r3, r2
 8001018:	d03c      	beq.n	8001094 <HAL_DMA_IRQHandler+0x108>
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	2202      	movs	r2, #2
 800101e:	4013      	ands	r3, r2
 8001020:	d038      	beq.n	8001094 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2220      	movs	r2, #32
 800102a:	4013      	ands	r3, r2
 800102c:	d10b      	bne.n	8001046 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	210a      	movs	r1, #10
 800103a:	438a      	bics	r2, r1
 800103c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2225      	movs	r2, #37	@ 0x25
 8001042:	2101      	movs	r1, #1
 8001044:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	001a      	movs	r2, r3
 800104c:	4b2e      	ldr	r3, [pc, #184]	@ (8001108 <HAL_DMA_IRQHandler+0x17c>)
 800104e:	429a      	cmp	r2, r3
 8001050:	d909      	bls.n	8001066 <HAL_DMA_IRQHandler+0xda>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001056:	221c      	movs	r2, #28
 8001058:	401a      	ands	r2, r3
 800105a:	4b2c      	ldr	r3, [pc, #176]	@ (800110c <HAL_DMA_IRQHandler+0x180>)
 800105c:	2102      	movs	r1, #2
 800105e:	4091      	lsls	r1, r2
 8001060:	000a      	movs	r2, r1
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	e008      	b.n	8001078 <HAL_DMA_IRQHandler+0xec>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106a:	221c      	movs	r2, #28
 800106c:	401a      	ands	r2, r3
 800106e:	4b28      	ldr	r3, [pc, #160]	@ (8001110 <HAL_DMA_IRQHandler+0x184>)
 8001070:	2102      	movs	r1, #2
 8001072:	4091      	lsls	r1, r2
 8001074:	000a      	movs	r2, r1
 8001076:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2224      	movs	r2, #36	@ 0x24
 800107c:	2100      	movs	r1, #0
 800107e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001084:	2b00      	cmp	r3, #0
 8001086:	d039      	beq.n	80010fc <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	0010      	movs	r0, r2
 8001090:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001092:	e033      	b.n	80010fc <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001098:	221c      	movs	r2, #28
 800109a:	4013      	ands	r3, r2
 800109c:	2208      	movs	r2, #8
 800109e:	409a      	lsls	r2, r3
 80010a0:	0013      	movs	r3, r2
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	4013      	ands	r3, r2
 80010a6:	d02a      	beq.n	80010fe <HAL_DMA_IRQHandler+0x172>
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	2208      	movs	r2, #8
 80010ac:	4013      	ands	r3, r2
 80010ae:	d026      	beq.n	80010fe <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	210e      	movs	r1, #14
 80010bc:	438a      	bics	r2, r1
 80010be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c4:	221c      	movs	r2, #28
 80010c6:	401a      	ands	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010cc:	2101      	movs	r1, #1
 80010ce:	4091      	lsls	r1, r2
 80010d0:	000a      	movs	r2, r1
 80010d2:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2201      	movs	r2, #1
 80010d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2225      	movs	r2, #37	@ 0x25
 80010de:	2101      	movs	r1, #1
 80010e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2224      	movs	r2, #36	@ 0x24
 80010e6:	2100      	movs	r1, #0
 80010e8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d005      	beq.n	80010fe <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	0010      	movs	r0, r2
 80010fa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80010fc:	46c0      	nop			@ (mov r8, r8)
 80010fe:	46c0      	nop			@ (mov r8, r8)
}
 8001100:	46bd      	mov	sp, r7
 8001102:	b004      	add	sp, #16
 8001104:	bd80      	pop	{r7, pc}
 8001106:	46c0      	nop			@ (mov r8, r8)
 8001108:	40020080 	.word	0x40020080
 800110c:	40020400 	.word	0x40020400
 8001110:	40020000 	.word	0x40020000

08001114 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
 8001120:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800112a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001130:	2b00      	cmp	r3, #0
 8001132:	d004      	beq.n	800113e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001138:	68fa      	ldr	r2, [r7, #12]
 800113a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800113c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001142:	221c      	movs	r2, #28
 8001144:	401a      	ands	r2, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114a:	2101      	movs	r1, #1
 800114c:	4091      	lsls	r1, r2
 800114e:	000a      	movs	r2, r1
 8001150:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	2b10      	cmp	r3, #16
 8001160:	d108      	bne.n	8001174 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001172:	e007      	b.n	8001184 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	68ba      	ldr	r2, [r7, #8]
 800117a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	60da      	str	r2, [r3, #12]
}
 8001184:	46c0      	nop			@ (mov r8, r8)
 8001186:	46bd      	mov	sp, r7
 8001188:	b004      	add	sp, #16
 800118a:	bd80      	pop	{r7, pc}

0800118c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	001a      	movs	r2, r3
 800119a:	4b1d      	ldr	r3, [pc, #116]	@ (8001210 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800119c:	429a      	cmp	r2, r3
 800119e:	d814      	bhi.n	80011ca <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	4a1a      	ldr	r2, [pc, #104]	@ (8001214 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80011aa:	189a      	adds	r2, r3, r2
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	001a      	movs	r2, r3
 80011b6:	23ff      	movs	r3, #255	@ 0xff
 80011b8:	4013      	ands	r3, r2
 80011ba:	3b08      	subs	r3, #8
 80011bc:	2114      	movs	r1, #20
 80011be:	0018      	movs	r0, r3
 80011c0:	f7fe ffa0 	bl	8000104 <__udivsi3>
 80011c4:	0003      	movs	r3, r0
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	e014      	b.n	80011f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ce:	089b      	lsrs	r3, r3, #2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4a11      	ldr	r2, [pc, #68]	@ (8001218 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80011d4:	189a      	adds	r2, r3, r2
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	001a      	movs	r2, r3
 80011e0:	23ff      	movs	r3, #255	@ 0xff
 80011e2:	4013      	ands	r3, r2
 80011e4:	3b08      	subs	r3, #8
 80011e6:	2114      	movs	r1, #20
 80011e8:	0018      	movs	r0, r3
 80011ea:	f7fe ff8b 	bl	8000104 <__udivsi3>
 80011ee:	0003      	movs	r3, r0
 80011f0:	3307      	adds	r3, #7
 80011f2:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a09      	ldr	r2, [pc, #36]	@ (800121c <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 80011f8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	221f      	movs	r2, #31
 80011fe:	4013      	ands	r3, r2
 8001200:	2201      	movs	r2, #1
 8001202:	409a      	lsls	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001208:	46c0      	nop			@ (mov r8, r8)
 800120a:	46bd      	mov	sp, r7
 800120c:	b004      	add	sp, #16
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40020407 	.word	0x40020407
 8001214:	40020800 	.word	0x40020800
 8001218:	4002081c 	.word	0x4002081c
 800121c:	40020880 	.word	0x40020880

08001220 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	227f      	movs	r2, #127	@ 0x7f
 800122e:	4013      	ands	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4a0a      	ldr	r2, [pc, #40]	@ (8001260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001236:	4694      	mov	ip, r2
 8001238:	4463      	add	r3, ip
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	001a      	movs	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a07      	ldr	r2, [pc, #28]	@ (8001264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001246:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	3b01      	subs	r3, #1
 800124c:	2203      	movs	r2, #3
 800124e:	4013      	ands	r3, r2
 8001250:	2201      	movs	r2, #1
 8001252:	409a      	lsls	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001258:	46c0      	nop			@ (mov r8, r8)
 800125a:	46bd      	mov	sp, r7
 800125c:	b004      	add	sp, #16
 800125e:	bd80      	pop	{r7, pc}
 8001260:	1000823f 	.word	0x1000823f
 8001264:	40020940 	.word	0x40020940

08001268 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001276:	e14d      	b.n	8001514 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2101      	movs	r1, #1
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	4091      	lsls	r1, r2
 8001282:	000a      	movs	r2, r1
 8001284:	4013      	ands	r3, r2
 8001286:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d100      	bne.n	8001290 <HAL_GPIO_Init+0x28>
 800128e:	e13e      	b.n	800150e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2203      	movs	r2, #3
 8001296:	4013      	ands	r3, r2
 8001298:	2b01      	cmp	r3, #1
 800129a:	d005      	beq.n	80012a8 <HAL_GPIO_Init+0x40>
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2203      	movs	r2, #3
 80012a2:	4013      	ands	r3, r2
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d130      	bne.n	800130a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	2203      	movs	r2, #3
 80012b4:	409a      	lsls	r2, r3
 80012b6:	0013      	movs	r3, r2
 80012b8:	43da      	mvns	r2, r3
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	68da      	ldr	r2, [r3, #12]
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	409a      	lsls	r2, r3
 80012ca:	0013      	movs	r3, r2
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012de:	2201      	movs	r2, #1
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	409a      	lsls	r2, r3
 80012e4:	0013      	movs	r3, r2
 80012e6:	43da      	mvns	r2, r3
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	091b      	lsrs	r3, r3, #4
 80012f4:	2201      	movs	r2, #1
 80012f6:	401a      	ands	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	409a      	lsls	r2, r3
 80012fc:	0013      	movs	r3, r2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2203      	movs	r2, #3
 8001310:	4013      	ands	r3, r2
 8001312:	2b03      	cmp	r3, #3
 8001314:	d017      	beq.n	8001346 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	2203      	movs	r2, #3
 8001322:	409a      	lsls	r2, r3
 8001324:	0013      	movs	r3, r2
 8001326:	43da      	mvns	r2, r3
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	4013      	ands	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	409a      	lsls	r2, r3
 8001338:	0013      	movs	r3, r2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2203      	movs	r2, #3
 800134c:	4013      	ands	r3, r2
 800134e:	2b02      	cmp	r3, #2
 8001350:	d123      	bne.n	800139a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	08da      	lsrs	r2, r3, #3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3208      	adds	r2, #8
 800135a:	0092      	lsls	r2, r2, #2
 800135c:	58d3      	ldr	r3, [r2, r3]
 800135e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	2207      	movs	r2, #7
 8001364:	4013      	ands	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	220f      	movs	r2, #15
 800136a:	409a      	lsls	r2, r3
 800136c:	0013      	movs	r3, r2
 800136e:	43da      	mvns	r2, r3
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4013      	ands	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	691a      	ldr	r2, [r3, #16]
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	2107      	movs	r1, #7
 800137e:	400b      	ands	r3, r1
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	409a      	lsls	r2, r3
 8001384:	0013      	movs	r3, r2
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4313      	orrs	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	08da      	lsrs	r2, r3, #3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3208      	adds	r2, #8
 8001394:	0092      	lsls	r2, r2, #2
 8001396:	6939      	ldr	r1, [r7, #16]
 8001398:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	2203      	movs	r2, #3
 80013a6:	409a      	lsls	r2, r3
 80013a8:	0013      	movs	r3, r2
 80013aa:	43da      	mvns	r2, r3
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2203      	movs	r2, #3
 80013b8:	401a      	ands	r2, r3
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	409a      	lsls	r2, r3
 80013c0:	0013      	movs	r3, r2
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	23c0      	movs	r3, #192	@ 0xc0
 80013d4:	029b      	lsls	r3, r3, #10
 80013d6:	4013      	ands	r3, r2
 80013d8:	d100      	bne.n	80013dc <HAL_GPIO_Init+0x174>
 80013da:	e098      	b.n	800150e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80013dc:	4a53      	ldr	r2, [pc, #332]	@ (800152c <HAL_GPIO_Init+0x2c4>)
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	089b      	lsrs	r3, r3, #2
 80013e2:	3318      	adds	r3, #24
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	589b      	ldr	r3, [r3, r2]
 80013e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	2203      	movs	r2, #3
 80013ee:	4013      	ands	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	220f      	movs	r2, #15
 80013f4:	409a      	lsls	r2, r3
 80013f6:	0013      	movs	r3, r2
 80013f8:	43da      	mvns	r2, r3
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	23a0      	movs	r3, #160	@ 0xa0
 8001404:	05db      	lsls	r3, r3, #23
 8001406:	429a      	cmp	r2, r3
 8001408:	d019      	beq.n	800143e <HAL_GPIO_Init+0x1d6>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a48      	ldr	r2, [pc, #288]	@ (8001530 <HAL_GPIO_Init+0x2c8>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d013      	beq.n	800143a <HAL_GPIO_Init+0x1d2>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a47      	ldr	r2, [pc, #284]	@ (8001534 <HAL_GPIO_Init+0x2cc>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d00d      	beq.n	8001436 <HAL_GPIO_Init+0x1ce>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a46      	ldr	r2, [pc, #280]	@ (8001538 <HAL_GPIO_Init+0x2d0>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d007      	beq.n	8001432 <HAL_GPIO_Init+0x1ca>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a45      	ldr	r2, [pc, #276]	@ (800153c <HAL_GPIO_Init+0x2d4>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d101      	bne.n	800142e <HAL_GPIO_Init+0x1c6>
 800142a:	2304      	movs	r3, #4
 800142c:	e008      	b.n	8001440 <HAL_GPIO_Init+0x1d8>
 800142e:	2305      	movs	r3, #5
 8001430:	e006      	b.n	8001440 <HAL_GPIO_Init+0x1d8>
 8001432:	2303      	movs	r3, #3
 8001434:	e004      	b.n	8001440 <HAL_GPIO_Init+0x1d8>
 8001436:	2302      	movs	r3, #2
 8001438:	e002      	b.n	8001440 <HAL_GPIO_Init+0x1d8>
 800143a:	2301      	movs	r3, #1
 800143c:	e000      	b.n	8001440 <HAL_GPIO_Init+0x1d8>
 800143e:	2300      	movs	r3, #0
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	2103      	movs	r1, #3
 8001444:	400a      	ands	r2, r1
 8001446:	00d2      	lsls	r2, r2, #3
 8001448:	4093      	lsls	r3, r2
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001450:	4936      	ldr	r1, [pc, #216]	@ (800152c <HAL_GPIO_Init+0x2c4>)
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	089b      	lsrs	r3, r3, #2
 8001456:	3318      	adds	r3, #24
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800145e:	4b33      	ldr	r3, [pc, #204]	@ (800152c <HAL_GPIO_Init+0x2c4>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	43da      	mvns	r2, r3
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	2380      	movs	r3, #128	@ 0x80
 8001474:	035b      	lsls	r3, r3, #13
 8001476:	4013      	ands	r3, r2
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4313      	orrs	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001482:	4b2a      	ldr	r3, [pc, #168]	@ (800152c <HAL_GPIO_Init+0x2c4>)
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001488:	4b28      	ldr	r3, [pc, #160]	@ (800152c <HAL_GPIO_Init+0x2c4>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	43da      	mvns	r2, r3
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	4013      	ands	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	2380      	movs	r3, #128	@ 0x80
 800149e:	039b      	lsls	r3, r3, #14
 80014a0:	4013      	ands	r3, r2
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014ac:	4b1f      	ldr	r3, [pc, #124]	@ (800152c <HAL_GPIO_Init+0x2c4>)
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014b2:	4a1e      	ldr	r2, [pc, #120]	@ (800152c <HAL_GPIO_Init+0x2c4>)
 80014b4:	2384      	movs	r3, #132	@ 0x84
 80014b6:	58d3      	ldr	r3, [r2, r3]
 80014b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	43da      	mvns	r2, r3
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	4013      	ands	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	2380      	movs	r3, #128	@ 0x80
 80014ca:	029b      	lsls	r3, r3, #10
 80014cc:	4013      	ands	r3, r2
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014d8:	4914      	ldr	r1, [pc, #80]	@ (800152c <HAL_GPIO_Init+0x2c4>)
 80014da:	2284      	movs	r2, #132	@ 0x84
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80014e0:	4a12      	ldr	r2, [pc, #72]	@ (800152c <HAL_GPIO_Init+0x2c4>)
 80014e2:	2380      	movs	r3, #128	@ 0x80
 80014e4:	58d3      	ldr	r3, [r2, r3]
 80014e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	43da      	mvns	r2, r3
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	2380      	movs	r3, #128	@ 0x80
 80014f8:	025b      	lsls	r3, r3, #9
 80014fa:	4013      	ands	r3, r2
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4313      	orrs	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001506:	4909      	ldr	r1, [pc, #36]	@ (800152c <HAL_GPIO_Init+0x2c4>)
 8001508:	2280      	movs	r2, #128	@ 0x80
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	3301      	adds	r3, #1
 8001512:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	40da      	lsrs	r2, r3
 800151c:	1e13      	subs	r3, r2, #0
 800151e:	d000      	beq.n	8001522 <HAL_GPIO_Init+0x2ba>
 8001520:	e6aa      	b.n	8001278 <HAL_GPIO_Init+0x10>
  }
}
 8001522:	46c0      	nop			@ (mov r8, r8)
 8001524:	46c0      	nop			@ (mov r8, r8)
 8001526:	46bd      	mov	sp, r7
 8001528:	b006      	add	sp, #24
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40021800 	.word	0x40021800
 8001530:	50000400 	.word	0x50000400
 8001534:	50000800 	.word	0x50000800
 8001538:	50000c00 	.word	0x50000c00
 800153c:	50001000 	.word	0x50001000

08001540 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001548:	4b19      	ldr	r3, [pc, #100]	@ (80015b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a19      	ldr	r2, [pc, #100]	@ (80015b4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800154e:	4013      	ands	r3, r2
 8001550:	0019      	movs	r1, r3
 8001552:	4b17      	ldr	r3, [pc, #92]	@ (80015b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	430a      	orrs	r2, r1
 8001558:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	2380      	movs	r3, #128	@ 0x80
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	429a      	cmp	r2, r3
 8001562:	d11f      	bne.n	80015a4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001564:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	0013      	movs	r3, r2
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	189b      	adds	r3, r3, r2
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	4912      	ldr	r1, [pc, #72]	@ (80015bc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001572:	0018      	movs	r0, r3
 8001574:	f7fe fdc6 	bl	8000104 <__udivsi3>
 8001578:	0003      	movs	r3, r0
 800157a:	3301      	adds	r3, #1
 800157c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800157e:	e008      	b.n	8001592 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	3b01      	subs	r3, #1
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	e001      	b.n	8001592 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e009      	b.n	80015a6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001592:	4b07      	ldr	r3, [pc, #28]	@ (80015b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001594:	695a      	ldr	r2, [r3, #20]
 8001596:	2380      	movs	r3, #128	@ 0x80
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	401a      	ands	r2, r3
 800159c:	2380      	movs	r3, #128	@ 0x80
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d0ed      	beq.n	8001580 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	0018      	movs	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b004      	add	sp, #16
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	46c0      	nop			@ (mov r8, r8)
 80015b0:	40007000 	.word	0x40007000
 80015b4:	fffff9ff 	.word	0xfffff9ff
 80015b8:	20000000 	.word	0x20000000
 80015bc:	000f4240 	.word	0x000f4240

080015c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d102      	bne.n	80015d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	f000 fb50 	bl	8001c74 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2201      	movs	r2, #1
 80015da:	4013      	ands	r3, r2
 80015dc:	d100      	bne.n	80015e0 <HAL_RCC_OscConfig+0x20>
 80015de:	e07c      	b.n	80016da <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015e0:	4bc3      	ldr	r3, [pc, #780]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2238      	movs	r2, #56	@ 0x38
 80015e6:	4013      	ands	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015ea:	4bc1      	ldr	r3, [pc, #772]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	2203      	movs	r2, #3
 80015f0:	4013      	ands	r3, r2
 80015f2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	2b10      	cmp	r3, #16
 80015f8:	d102      	bne.n	8001600 <HAL_RCC_OscConfig+0x40>
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	2b03      	cmp	r3, #3
 80015fe:	d002      	beq.n	8001606 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	2b08      	cmp	r3, #8
 8001604:	d10b      	bne.n	800161e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001606:	4bba      	ldr	r3, [pc, #744]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	2380      	movs	r3, #128	@ 0x80
 800160c:	029b      	lsls	r3, r3, #10
 800160e:	4013      	ands	r3, r2
 8001610:	d062      	beq.n	80016d8 <HAL_RCC_OscConfig+0x118>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d15e      	bne.n	80016d8 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e32a      	b.n	8001c74 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	2380      	movs	r3, #128	@ 0x80
 8001624:	025b      	lsls	r3, r3, #9
 8001626:	429a      	cmp	r2, r3
 8001628:	d107      	bne.n	800163a <HAL_RCC_OscConfig+0x7a>
 800162a:	4bb1      	ldr	r3, [pc, #708]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	4bb0      	ldr	r3, [pc, #704]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 8001630:	2180      	movs	r1, #128	@ 0x80
 8001632:	0249      	lsls	r1, r1, #9
 8001634:	430a      	orrs	r2, r1
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	e020      	b.n	800167c <HAL_RCC_OscConfig+0xbc>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	23a0      	movs	r3, #160	@ 0xa0
 8001640:	02db      	lsls	r3, r3, #11
 8001642:	429a      	cmp	r2, r3
 8001644:	d10e      	bne.n	8001664 <HAL_RCC_OscConfig+0xa4>
 8001646:	4baa      	ldr	r3, [pc, #680]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	4ba9      	ldr	r3, [pc, #676]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 800164c:	2180      	movs	r1, #128	@ 0x80
 800164e:	02c9      	lsls	r1, r1, #11
 8001650:	430a      	orrs	r2, r1
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	4ba6      	ldr	r3, [pc, #664]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4ba5      	ldr	r3, [pc, #660]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 800165a:	2180      	movs	r1, #128	@ 0x80
 800165c:	0249      	lsls	r1, r1, #9
 800165e:	430a      	orrs	r2, r1
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	e00b      	b.n	800167c <HAL_RCC_OscConfig+0xbc>
 8001664:	4ba2      	ldr	r3, [pc, #648]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4ba1      	ldr	r3, [pc, #644]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 800166a:	49a2      	ldr	r1, [pc, #648]	@ (80018f4 <HAL_RCC_OscConfig+0x334>)
 800166c:	400a      	ands	r2, r1
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	4b9f      	ldr	r3, [pc, #636]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b9e      	ldr	r3, [pc, #632]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 8001676:	49a0      	ldr	r1, [pc, #640]	@ (80018f8 <HAL_RCC_OscConfig+0x338>)
 8001678:	400a      	ands	r2, r1
 800167a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d014      	beq.n	80016ae <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001684:	f7ff fa2e 	bl	8000ae4 <HAL_GetTick>
 8001688:	0003      	movs	r3, r0
 800168a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800168e:	f7ff fa29 	bl	8000ae4 <HAL_GetTick>
 8001692:	0002      	movs	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b64      	cmp	r3, #100	@ 0x64
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e2e9      	b.n	8001c74 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016a0:	4b93      	ldr	r3, [pc, #588]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	2380      	movs	r3, #128	@ 0x80
 80016a6:	029b      	lsls	r3, r3, #10
 80016a8:	4013      	ands	r3, r2
 80016aa:	d0f0      	beq.n	800168e <HAL_RCC_OscConfig+0xce>
 80016ac:	e015      	b.n	80016da <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ae:	f7ff fa19 	bl	8000ae4 <HAL_GetTick>
 80016b2:	0003      	movs	r3, r0
 80016b4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b8:	f7ff fa14 	bl	8000ae4 <HAL_GetTick>
 80016bc:	0002      	movs	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b64      	cmp	r3, #100	@ 0x64
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e2d4      	b.n	8001c74 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ca:	4b89      	ldr	r3, [pc, #548]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	2380      	movs	r3, #128	@ 0x80
 80016d0:	029b      	lsls	r3, r3, #10
 80016d2:	4013      	ands	r3, r2
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0xf8>
 80016d6:	e000      	b.n	80016da <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2202      	movs	r2, #2
 80016e0:	4013      	ands	r3, r2
 80016e2:	d100      	bne.n	80016e6 <HAL_RCC_OscConfig+0x126>
 80016e4:	e099      	b.n	800181a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016e6:	4b82      	ldr	r3, [pc, #520]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2238      	movs	r2, #56	@ 0x38
 80016ec:	4013      	ands	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016f0:	4b7f      	ldr	r3, [pc, #508]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	2203      	movs	r2, #3
 80016f6:	4013      	ands	r3, r2
 80016f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	2b10      	cmp	r3, #16
 80016fe:	d102      	bne.n	8001706 <HAL_RCC_OscConfig+0x146>
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	2b02      	cmp	r3, #2
 8001704:	d002      	beq.n	800170c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d135      	bne.n	8001778 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800170c:	4b78      	ldr	r3, [pc, #480]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	2380      	movs	r3, #128	@ 0x80
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	4013      	ands	r3, r2
 8001716:	d005      	beq.n	8001724 <HAL_RCC_OscConfig+0x164>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e2a7      	b.n	8001c74 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001724:	4b72      	ldr	r3, [pc, #456]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	4a74      	ldr	r2, [pc, #464]	@ (80018fc <HAL_RCC_OscConfig+0x33c>)
 800172a:	4013      	ands	r3, r2
 800172c:	0019      	movs	r1, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	021a      	lsls	r2, r3, #8
 8001734:	4b6e      	ldr	r3, [pc, #440]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 8001736:	430a      	orrs	r2, r1
 8001738:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d112      	bne.n	8001766 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001740:	4b6b      	ldr	r3, [pc, #428]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a6e      	ldr	r2, [pc, #440]	@ (8001900 <HAL_RCC_OscConfig+0x340>)
 8001746:	4013      	ands	r3, r2
 8001748:	0019      	movs	r1, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691a      	ldr	r2, [r3, #16]
 800174e:	4b68      	ldr	r3, [pc, #416]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 8001750:	430a      	orrs	r2, r1
 8001752:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001754:	4b66      	ldr	r3, [pc, #408]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	0adb      	lsrs	r3, r3, #11
 800175a:	2207      	movs	r2, #7
 800175c:	4013      	ands	r3, r2
 800175e:	4a69      	ldr	r2, [pc, #420]	@ (8001904 <HAL_RCC_OscConfig+0x344>)
 8001760:	40da      	lsrs	r2, r3
 8001762:	4b69      	ldr	r3, [pc, #420]	@ (8001908 <HAL_RCC_OscConfig+0x348>)
 8001764:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001766:	4b69      	ldr	r3, [pc, #420]	@ (800190c <HAL_RCC_OscConfig+0x34c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	0018      	movs	r0, r3
 800176c:	f7ff f95e 	bl	8000a2c <HAL_InitTick>
 8001770:	1e03      	subs	r3, r0, #0
 8001772:	d051      	beq.n	8001818 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e27d      	b.n	8001c74 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d030      	beq.n	80017e2 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001780:	4b5b      	ldr	r3, [pc, #364]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a5e      	ldr	r2, [pc, #376]	@ (8001900 <HAL_RCC_OscConfig+0x340>)
 8001786:	4013      	ands	r3, r2
 8001788:	0019      	movs	r1, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	691a      	ldr	r2, [r3, #16]
 800178e:	4b58      	ldr	r3, [pc, #352]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 8001790:	430a      	orrs	r2, r1
 8001792:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001794:	4b56      	ldr	r3, [pc, #344]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b55      	ldr	r3, [pc, #340]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 800179a:	2180      	movs	r1, #128	@ 0x80
 800179c:	0049      	lsls	r1, r1, #1
 800179e:	430a      	orrs	r2, r1
 80017a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a2:	f7ff f99f 	bl	8000ae4 <HAL_GetTick>
 80017a6:	0003      	movs	r3, r0
 80017a8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ac:	f7ff f99a 	bl	8000ae4 <HAL_GetTick>
 80017b0:	0002      	movs	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e25a      	b.n	8001c74 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017be:	4b4c      	ldr	r3, [pc, #304]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	2380      	movs	r3, #128	@ 0x80
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	4013      	ands	r3, r2
 80017c8:	d0f0      	beq.n	80017ac <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ca:	4b49      	ldr	r3, [pc, #292]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	4a4b      	ldr	r2, [pc, #300]	@ (80018fc <HAL_RCC_OscConfig+0x33c>)
 80017d0:	4013      	ands	r3, r2
 80017d2:	0019      	movs	r1, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	695b      	ldr	r3, [r3, #20]
 80017d8:	021a      	lsls	r2, r3, #8
 80017da:	4b45      	ldr	r3, [pc, #276]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 80017dc:	430a      	orrs	r2, r1
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	e01b      	b.n	800181a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80017e2:	4b43      	ldr	r3, [pc, #268]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	4b42      	ldr	r3, [pc, #264]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 80017e8:	4949      	ldr	r1, [pc, #292]	@ (8001910 <HAL_RCC_OscConfig+0x350>)
 80017ea:	400a      	ands	r2, r1
 80017ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ee:	f7ff f979 	bl	8000ae4 <HAL_GetTick>
 80017f2:	0003      	movs	r3, r0
 80017f4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f8:	f7ff f974 	bl	8000ae4 <HAL_GetTick>
 80017fc:	0002      	movs	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e234      	b.n	8001c74 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800180a:	4b39      	ldr	r3, [pc, #228]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	2380      	movs	r3, #128	@ 0x80
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	4013      	ands	r3, r2
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x238>
 8001816:	e000      	b.n	800181a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001818:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2208      	movs	r2, #8
 8001820:	4013      	ands	r3, r2
 8001822:	d047      	beq.n	80018b4 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001824:	4b32      	ldr	r3, [pc, #200]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	2238      	movs	r2, #56	@ 0x38
 800182a:	4013      	ands	r3, r2
 800182c:	2b18      	cmp	r3, #24
 800182e:	d10a      	bne.n	8001846 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001830:	4b2f      	ldr	r3, [pc, #188]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 8001832:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001834:	2202      	movs	r2, #2
 8001836:	4013      	ands	r3, r2
 8001838:	d03c      	beq.n	80018b4 <HAL_RCC_OscConfig+0x2f4>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d138      	bne.n	80018b4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e216      	b.n	8001c74 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d019      	beq.n	8001882 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800184e:	4b28      	ldr	r3, [pc, #160]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 8001850:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001852:	4b27      	ldr	r3, [pc, #156]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 8001854:	2101      	movs	r1, #1
 8001856:	430a      	orrs	r2, r1
 8001858:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185a:	f7ff f943 	bl	8000ae4 <HAL_GetTick>
 800185e:	0003      	movs	r3, r0
 8001860:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001864:	f7ff f93e 	bl	8000ae4 <HAL_GetTick>
 8001868:	0002      	movs	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e1fe      	b.n	8001c74 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001876:	4b1e      	ldr	r3, [pc, #120]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 8001878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800187a:	2202      	movs	r2, #2
 800187c:	4013      	ands	r3, r2
 800187e:	d0f1      	beq.n	8001864 <HAL_RCC_OscConfig+0x2a4>
 8001880:	e018      	b.n	80018b4 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001882:	4b1b      	ldr	r3, [pc, #108]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 8001884:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001886:	4b1a      	ldr	r3, [pc, #104]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 8001888:	2101      	movs	r1, #1
 800188a:	438a      	bics	r2, r1
 800188c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188e:	f7ff f929 	bl	8000ae4 <HAL_GetTick>
 8001892:	0003      	movs	r3, r0
 8001894:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001898:	f7ff f924 	bl	8000ae4 <HAL_GetTick>
 800189c:	0002      	movs	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e1e4      	b.n	8001c74 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018aa:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 80018ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ae:	2202      	movs	r2, #2
 80018b0:	4013      	ands	r3, r2
 80018b2:	d1f1      	bne.n	8001898 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2204      	movs	r2, #4
 80018ba:	4013      	ands	r3, r2
 80018bc:	d100      	bne.n	80018c0 <HAL_RCC_OscConfig+0x300>
 80018be:	e0c7      	b.n	8001a50 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018c0:	231f      	movs	r3, #31
 80018c2:	18fb      	adds	r3, r7, r3
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80018c8:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	2238      	movs	r2, #56	@ 0x38
 80018ce:	4013      	ands	r3, r2
 80018d0:	2b20      	cmp	r3, #32
 80018d2:	d11f      	bne.n	8001914 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <HAL_RCC_OscConfig+0x330>)
 80018d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018d8:	2202      	movs	r2, #2
 80018da:	4013      	ands	r3, r2
 80018dc:	d100      	bne.n	80018e0 <HAL_RCC_OscConfig+0x320>
 80018de:	e0b7      	b.n	8001a50 <HAL_RCC_OscConfig+0x490>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d000      	beq.n	80018ea <HAL_RCC_OscConfig+0x32a>
 80018e8:	e0b2      	b.n	8001a50 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e1c2      	b.n	8001c74 <HAL_RCC_OscConfig+0x6b4>
 80018ee:	46c0      	nop			@ (mov r8, r8)
 80018f0:	40021000 	.word	0x40021000
 80018f4:	fffeffff 	.word	0xfffeffff
 80018f8:	fffbffff 	.word	0xfffbffff
 80018fc:	ffff80ff 	.word	0xffff80ff
 8001900:	ffffc7ff 	.word	0xffffc7ff
 8001904:	00f42400 	.word	0x00f42400
 8001908:	20000000 	.word	0x20000000
 800190c:	20000004 	.word	0x20000004
 8001910:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001914:	4bb5      	ldr	r3, [pc, #724]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 8001916:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001918:	2380      	movs	r3, #128	@ 0x80
 800191a:	055b      	lsls	r3, r3, #21
 800191c:	4013      	ands	r3, r2
 800191e:	d101      	bne.n	8001924 <HAL_RCC_OscConfig+0x364>
 8001920:	2301      	movs	r3, #1
 8001922:	e000      	b.n	8001926 <HAL_RCC_OscConfig+0x366>
 8001924:	2300      	movs	r3, #0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d011      	beq.n	800194e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800192a:	4bb0      	ldr	r3, [pc, #704]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 800192c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800192e:	4baf      	ldr	r3, [pc, #700]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 8001930:	2180      	movs	r1, #128	@ 0x80
 8001932:	0549      	lsls	r1, r1, #21
 8001934:	430a      	orrs	r2, r1
 8001936:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001938:	4bac      	ldr	r3, [pc, #688]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 800193a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800193c:	2380      	movs	r3, #128	@ 0x80
 800193e:	055b      	lsls	r3, r3, #21
 8001940:	4013      	ands	r3, r2
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001946:	231f      	movs	r3, #31
 8001948:	18fb      	adds	r3, r7, r3
 800194a:	2201      	movs	r2, #1
 800194c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800194e:	4ba8      	ldr	r3, [pc, #672]	@ (8001bf0 <HAL_RCC_OscConfig+0x630>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	2380      	movs	r3, #128	@ 0x80
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	4013      	ands	r3, r2
 8001958:	d11a      	bne.n	8001990 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800195a:	4ba5      	ldr	r3, [pc, #660]	@ (8001bf0 <HAL_RCC_OscConfig+0x630>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	4ba4      	ldr	r3, [pc, #656]	@ (8001bf0 <HAL_RCC_OscConfig+0x630>)
 8001960:	2180      	movs	r1, #128	@ 0x80
 8001962:	0049      	lsls	r1, r1, #1
 8001964:	430a      	orrs	r2, r1
 8001966:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001968:	f7ff f8bc 	bl	8000ae4 <HAL_GetTick>
 800196c:	0003      	movs	r3, r0
 800196e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001972:	f7ff f8b7 	bl	8000ae4 <HAL_GetTick>
 8001976:	0002      	movs	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e177      	b.n	8001c74 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001984:	4b9a      	ldr	r3, [pc, #616]	@ (8001bf0 <HAL_RCC_OscConfig+0x630>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	2380      	movs	r3, #128	@ 0x80
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4013      	ands	r3, r2
 800198e:	d0f0      	beq.n	8001972 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d106      	bne.n	80019a6 <HAL_RCC_OscConfig+0x3e6>
 8001998:	4b94      	ldr	r3, [pc, #592]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 800199a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800199c:	4b93      	ldr	r3, [pc, #588]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 800199e:	2101      	movs	r1, #1
 80019a0:	430a      	orrs	r2, r1
 80019a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80019a4:	e01c      	b.n	80019e0 <HAL_RCC_OscConfig+0x420>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b05      	cmp	r3, #5
 80019ac:	d10c      	bne.n	80019c8 <HAL_RCC_OscConfig+0x408>
 80019ae:	4b8f      	ldr	r3, [pc, #572]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 80019b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019b2:	4b8e      	ldr	r3, [pc, #568]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 80019b4:	2104      	movs	r1, #4
 80019b6:	430a      	orrs	r2, r1
 80019b8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80019ba:	4b8c      	ldr	r3, [pc, #560]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 80019bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019be:	4b8b      	ldr	r3, [pc, #556]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 80019c0:	2101      	movs	r1, #1
 80019c2:	430a      	orrs	r2, r1
 80019c4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80019c6:	e00b      	b.n	80019e0 <HAL_RCC_OscConfig+0x420>
 80019c8:	4b88      	ldr	r3, [pc, #544]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 80019ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019cc:	4b87      	ldr	r3, [pc, #540]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 80019ce:	2101      	movs	r1, #1
 80019d0:	438a      	bics	r2, r1
 80019d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80019d4:	4b85      	ldr	r3, [pc, #532]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 80019d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019d8:	4b84      	ldr	r3, [pc, #528]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 80019da:	2104      	movs	r1, #4
 80019dc:	438a      	bics	r2, r1
 80019de:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d014      	beq.n	8001a12 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e8:	f7ff f87c 	bl	8000ae4 <HAL_GetTick>
 80019ec:	0003      	movs	r3, r0
 80019ee:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019f0:	e009      	b.n	8001a06 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f2:	f7ff f877 	bl	8000ae4 <HAL_GetTick>
 80019f6:	0002      	movs	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	4a7d      	ldr	r2, [pc, #500]	@ (8001bf4 <HAL_RCC_OscConfig+0x634>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e136      	b.n	8001c74 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a06:	4b79      	ldr	r3, [pc, #484]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 8001a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d0f0      	beq.n	80019f2 <HAL_RCC_OscConfig+0x432>
 8001a10:	e013      	b.n	8001a3a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a12:	f7ff f867 	bl	8000ae4 <HAL_GetTick>
 8001a16:	0003      	movs	r3, r0
 8001a18:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a1a:	e009      	b.n	8001a30 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1c:	f7ff f862 	bl	8000ae4 <HAL_GetTick>
 8001a20:	0002      	movs	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	4a73      	ldr	r2, [pc, #460]	@ (8001bf4 <HAL_RCC_OscConfig+0x634>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e121      	b.n	8001c74 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a30:	4b6e      	ldr	r3, [pc, #440]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 8001a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a34:	2202      	movs	r2, #2
 8001a36:	4013      	ands	r3, r2
 8001a38:	d1f0      	bne.n	8001a1c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001a3a:	231f      	movs	r3, #31
 8001a3c:	18fb      	adds	r3, r7, r3
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d105      	bne.n	8001a50 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001a44:	4b69      	ldr	r3, [pc, #420]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 8001a46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a48:	4b68      	ldr	r3, [pc, #416]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 8001a4a:	496b      	ldr	r1, [pc, #428]	@ (8001bf8 <HAL_RCC_OscConfig+0x638>)
 8001a4c:	400a      	ands	r2, r1
 8001a4e:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2220      	movs	r2, #32
 8001a56:	4013      	ands	r3, r2
 8001a58:	d039      	beq.n	8001ace <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d01b      	beq.n	8001a9a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a62:	4b62      	ldr	r3, [pc, #392]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	4b61      	ldr	r3, [pc, #388]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 8001a68:	2180      	movs	r1, #128	@ 0x80
 8001a6a:	03c9      	lsls	r1, r1, #15
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a70:	f7ff f838 	bl	8000ae4 <HAL_GetTick>
 8001a74:	0003      	movs	r3, r0
 8001a76:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a7a:	f7ff f833 	bl	8000ae4 <HAL_GetTick>
 8001a7e:	0002      	movs	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e0f3      	b.n	8001c74 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001a8c:	4b57      	ldr	r3, [pc, #348]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	2380      	movs	r3, #128	@ 0x80
 8001a92:	041b      	lsls	r3, r3, #16
 8001a94:	4013      	ands	r3, r2
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCC_OscConfig+0x4ba>
 8001a98:	e019      	b.n	8001ace <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a9a:	4b54      	ldr	r3, [pc, #336]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	4b53      	ldr	r3, [pc, #332]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 8001aa0:	4956      	ldr	r1, [pc, #344]	@ (8001bfc <HAL_RCC_OscConfig+0x63c>)
 8001aa2:	400a      	ands	r2, r1
 8001aa4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa6:	f7ff f81d 	bl	8000ae4 <HAL_GetTick>
 8001aaa:	0003      	movs	r3, r0
 8001aac:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ab0:	f7ff f818 	bl	8000ae4 <HAL_GetTick>
 8001ab4:	0002      	movs	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e0d8      	b.n	8001c74 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001ac2:	4b4a      	ldr	r3, [pc, #296]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	2380      	movs	r3, #128	@ 0x80
 8001ac8:	041b      	lsls	r3, r3, #16
 8001aca:	4013      	ands	r3, r2
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d100      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x518>
 8001ad6:	e0cc      	b.n	8001c72 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ad8:	4b44      	ldr	r3, [pc, #272]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	2238      	movs	r2, #56	@ 0x38
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b10      	cmp	r3, #16
 8001ae2:	d100      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x526>
 8001ae4:	e07b      	b.n	8001bde <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d156      	bne.n	8001b9c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aee:	4b3f      	ldr	r3, [pc, #252]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	4b3e      	ldr	r3, [pc, #248]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 8001af4:	4942      	ldr	r1, [pc, #264]	@ (8001c00 <HAL_RCC_OscConfig+0x640>)
 8001af6:	400a      	ands	r2, r1
 8001af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afa:	f7fe fff3 	bl	8000ae4 <HAL_GetTick>
 8001afe:	0003      	movs	r3, r0
 8001b00:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b04:	f7fe ffee 	bl	8000ae4 <HAL_GetTick>
 8001b08:	0002      	movs	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e0ae      	b.n	8001c74 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b16:	4b35      	ldr	r3, [pc, #212]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	2380      	movs	r3, #128	@ 0x80
 8001b1c:	049b      	lsls	r3, r3, #18
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b22:	4b32      	ldr	r3, [pc, #200]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	4a37      	ldr	r2, [pc, #220]	@ (8001c04 <HAL_RCC_OscConfig+0x644>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	0019      	movs	r1, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b34:	431a      	orrs	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	4b26      	ldr	r3, [pc, #152]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 8001b52:	430a      	orrs	r2, r1
 8001b54:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b56:	4b25      	ldr	r3, [pc, #148]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	4b24      	ldr	r3, [pc, #144]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 8001b5c:	2180      	movs	r1, #128	@ 0x80
 8001b5e:	0449      	lsls	r1, r1, #17
 8001b60:	430a      	orrs	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001b64:	4b21      	ldr	r3, [pc, #132]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 8001b66:	68da      	ldr	r2, [r3, #12]
 8001b68:	4b20      	ldr	r3, [pc, #128]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 8001b6a:	2180      	movs	r1, #128	@ 0x80
 8001b6c:	0549      	lsls	r1, r1, #21
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b72:	f7fe ffb7 	bl	8000ae4 <HAL_GetTick>
 8001b76:	0003      	movs	r3, r0
 8001b78:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7c:	f7fe ffb2 	bl	8000ae4 <HAL_GetTick>
 8001b80:	0002      	movs	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e072      	b.n	8001c74 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b8e:	4b17      	ldr	r3, [pc, #92]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	2380      	movs	r3, #128	@ 0x80
 8001b94:	049b      	lsls	r3, r3, #18
 8001b96:	4013      	ands	r3, r2
 8001b98:	d0f0      	beq.n	8001b7c <HAL_RCC_OscConfig+0x5bc>
 8001b9a:	e06a      	b.n	8001c72 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9c:	4b13      	ldr	r3, [pc, #76]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4b12      	ldr	r3, [pc, #72]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 8001ba2:	4917      	ldr	r1, [pc, #92]	@ (8001c00 <HAL_RCC_OscConfig+0x640>)
 8001ba4:	400a      	ands	r2, r1
 8001ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba8:	f7fe ff9c 	bl	8000ae4 <HAL_GetTick>
 8001bac:	0003      	movs	r3, r0
 8001bae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb2:	f7fe ff97 	bl	8000ae4 <HAL_GetTick>
 8001bb6:	0002      	movs	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e057      	b.n	8001c74 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bc4:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	2380      	movs	r3, #128	@ 0x80
 8001bca:	049b      	lsls	r3, r3, #18
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d1f0      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001bd0:	4b06      	ldr	r3, [pc, #24]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	4b05      	ldr	r3, [pc, #20]	@ (8001bec <HAL_RCC_OscConfig+0x62c>)
 8001bd6:	490c      	ldr	r1, [pc, #48]	@ (8001c08 <HAL_RCC_OscConfig+0x648>)
 8001bd8:	400a      	ands	r2, r1
 8001bda:	60da      	str	r2, [r3, #12]
 8001bdc:	e049      	b.n	8001c72 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d112      	bne.n	8001c0c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e044      	b.n	8001c74 <HAL_RCC_OscConfig+0x6b4>
 8001bea:	46c0      	nop			@ (mov r8, r8)
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40007000 	.word	0x40007000
 8001bf4:	00001388 	.word	0x00001388
 8001bf8:	efffffff 	.word	0xefffffff
 8001bfc:	ffbfffff 	.word	0xffbfffff
 8001c00:	feffffff 	.word	0xfeffffff
 8001c04:	11c1808c 	.word	0x11c1808c
 8001c08:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c7c <HAL_RCC_OscConfig+0x6bc>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	2203      	movs	r2, #3
 8001c16:	401a      	ands	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d126      	bne.n	8001c6e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	2270      	movs	r2, #112	@ 0x70
 8001c24:	401a      	ands	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d11f      	bne.n	8001c6e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	23fe      	movs	r3, #254	@ 0xfe
 8001c32:	01db      	lsls	r3, r3, #7
 8001c34:	401a      	ands	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c3a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d116      	bne.n	8001c6e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	23f8      	movs	r3, #248	@ 0xf8
 8001c44:	039b      	lsls	r3, r3, #14
 8001c46:	401a      	ands	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d10e      	bne.n	8001c6e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	23e0      	movs	r3, #224	@ 0xe0
 8001c54:	051b      	lsls	r3, r3, #20
 8001c56:	401a      	ands	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d106      	bne.n	8001c6e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	0f5b      	lsrs	r3, r3, #29
 8001c64:	075a      	lsls	r2, r3, #29
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d001      	beq.n	8001c72 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	0018      	movs	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	b008      	add	sp, #32
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40021000 	.word	0x40021000

08001c80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0e9      	b.n	8001e68 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c94:	4b76      	ldr	r3, [pc, #472]	@ (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2207      	movs	r2, #7
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d91e      	bls.n	8001ce0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca2:	4b73      	ldr	r3, [pc, #460]	@ (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2207      	movs	r2, #7
 8001ca8:	4393      	bics	r3, r2
 8001caa:	0019      	movs	r1, r3
 8001cac:	4b70      	ldr	r3, [pc, #448]	@ (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cb4:	f7fe ff16 	bl	8000ae4 <HAL_GetTick>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cbc:	e009      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cbe:	f7fe ff11 	bl	8000ae4 <HAL_GetTick>
 8001cc2:	0002      	movs	r2, r0
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	4a6a      	ldr	r2, [pc, #424]	@ (8001e74 <HAL_RCC_ClockConfig+0x1f4>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e0ca      	b.n	8001e68 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cd2:	4b67      	ldr	r3, [pc, #412]	@ (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2207      	movs	r2, #7
 8001cd8:	4013      	ands	r3, r2
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d1ee      	bne.n	8001cbe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2202      	movs	r2, #2
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d015      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2204      	movs	r2, #4
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d006      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001cf4:	4b60      	ldr	r3, [pc, #384]	@ (8001e78 <HAL_RCC_ClockConfig+0x1f8>)
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	4b5f      	ldr	r3, [pc, #380]	@ (8001e78 <HAL_RCC_ClockConfig+0x1f8>)
 8001cfa:	21e0      	movs	r1, #224	@ 0xe0
 8001cfc:	01c9      	lsls	r1, r1, #7
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d02:	4b5d      	ldr	r3, [pc, #372]	@ (8001e78 <HAL_RCC_ClockConfig+0x1f8>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	4a5d      	ldr	r2, [pc, #372]	@ (8001e7c <HAL_RCC_ClockConfig+0x1fc>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	0019      	movs	r1, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	4b59      	ldr	r3, [pc, #356]	@ (8001e78 <HAL_RCC_ClockConfig+0x1f8>)
 8001d12:	430a      	orrs	r2, r1
 8001d14:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d057      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d107      	bne.n	8001d38 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d28:	4b53      	ldr	r3, [pc, #332]	@ (8001e78 <HAL_RCC_ClockConfig+0x1f8>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	2380      	movs	r3, #128	@ 0x80
 8001d2e:	029b      	lsls	r3, r3, #10
 8001d30:	4013      	ands	r3, r2
 8001d32:	d12b      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e097      	b.n	8001e68 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d107      	bne.n	8001d50 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d40:	4b4d      	ldr	r3, [pc, #308]	@ (8001e78 <HAL_RCC_ClockConfig+0x1f8>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	2380      	movs	r3, #128	@ 0x80
 8001d46:	049b      	lsls	r3, r3, #18
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d11f      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e08b      	b.n	8001e68 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d107      	bne.n	8001d68 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d58:	4b47      	ldr	r3, [pc, #284]	@ (8001e78 <HAL_RCC_ClockConfig+0x1f8>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	2380      	movs	r3, #128	@ 0x80
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	4013      	ands	r3, r2
 8001d62:	d113      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e07f      	b.n	8001e68 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	d106      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d70:	4b41      	ldr	r3, [pc, #260]	@ (8001e78 <HAL_RCC_ClockConfig+0x1f8>)
 8001d72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d74:	2202      	movs	r2, #2
 8001d76:	4013      	ands	r3, r2
 8001d78:	d108      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e074      	b.n	8001e68 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d7e:	4b3e      	ldr	r3, [pc, #248]	@ (8001e78 <HAL_RCC_ClockConfig+0x1f8>)
 8001d80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d82:	2202      	movs	r2, #2
 8001d84:	4013      	ands	r3, r2
 8001d86:	d101      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e06d      	b.n	8001e68 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d8c:	4b3a      	ldr	r3, [pc, #232]	@ (8001e78 <HAL_RCC_ClockConfig+0x1f8>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	2207      	movs	r2, #7
 8001d92:	4393      	bics	r3, r2
 8001d94:	0019      	movs	r1, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	4b37      	ldr	r3, [pc, #220]	@ (8001e78 <HAL_RCC_ClockConfig+0x1f8>)
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001da0:	f7fe fea0 	bl	8000ae4 <HAL_GetTick>
 8001da4:	0003      	movs	r3, r0
 8001da6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da8:	e009      	b.n	8001dbe <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001daa:	f7fe fe9b 	bl	8000ae4 <HAL_GetTick>
 8001dae:	0002      	movs	r2, r0
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	4a2f      	ldr	r2, [pc, #188]	@ (8001e74 <HAL_RCC_ClockConfig+0x1f4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e054      	b.n	8001e68 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dbe:	4b2e      	ldr	r3, [pc, #184]	@ (8001e78 <HAL_RCC_ClockConfig+0x1f8>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	2238      	movs	r2, #56	@ 0x38
 8001dc4:	401a      	ands	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d1ec      	bne.n	8001daa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd0:	4b27      	ldr	r3, [pc, #156]	@ (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2207      	movs	r2, #7
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d21e      	bcs.n	8001e1c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dde:	4b24      	ldr	r3, [pc, #144]	@ (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2207      	movs	r2, #7
 8001de4:	4393      	bics	r3, r2
 8001de6:	0019      	movs	r1, r3
 8001de8:	4b21      	ldr	r3, [pc, #132]	@ (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001df0:	f7fe fe78 	bl	8000ae4 <HAL_GetTick>
 8001df4:	0003      	movs	r3, r0
 8001df6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001df8:	e009      	b.n	8001e0e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dfa:	f7fe fe73 	bl	8000ae4 <HAL_GetTick>
 8001dfe:	0002      	movs	r2, r0
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	4a1b      	ldr	r2, [pc, #108]	@ (8001e74 <HAL_RCC_ClockConfig+0x1f4>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e02c      	b.n	8001e68 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e0e:	4b18      	ldr	r3, [pc, #96]	@ (8001e70 <HAL_RCC_ClockConfig+0x1f0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2207      	movs	r2, #7
 8001e14:	4013      	ands	r3, r2
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d1ee      	bne.n	8001dfa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2204      	movs	r2, #4
 8001e22:	4013      	ands	r3, r2
 8001e24:	d009      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e26:	4b14      	ldr	r3, [pc, #80]	@ (8001e78 <HAL_RCC_ClockConfig+0x1f8>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	4a15      	ldr	r2, [pc, #84]	@ (8001e80 <HAL_RCC_ClockConfig+0x200>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	0019      	movs	r1, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68da      	ldr	r2, [r3, #12]
 8001e34:	4b10      	ldr	r3, [pc, #64]	@ (8001e78 <HAL_RCC_ClockConfig+0x1f8>)
 8001e36:	430a      	orrs	r2, r1
 8001e38:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e3a:	f000 f829 	bl	8001e90 <HAL_RCC_GetSysClockFreq>
 8001e3e:	0001      	movs	r1, r0
 8001e40:	4b0d      	ldr	r3, [pc, #52]	@ (8001e78 <HAL_RCC_ClockConfig+0x1f8>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	220f      	movs	r2, #15
 8001e48:	401a      	ands	r2, r3
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e84 <HAL_RCC_ClockConfig+0x204>)
 8001e4c:	0092      	lsls	r2, r2, #2
 8001e4e:	58d3      	ldr	r3, [r2, r3]
 8001e50:	221f      	movs	r2, #31
 8001e52:	4013      	ands	r3, r2
 8001e54:	000a      	movs	r2, r1
 8001e56:	40da      	lsrs	r2, r3
 8001e58:	4b0b      	ldr	r3, [pc, #44]	@ (8001e88 <HAL_RCC_ClockConfig+0x208>)
 8001e5a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e8c <HAL_RCC_ClockConfig+0x20c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	0018      	movs	r0, r3
 8001e62:	f7fe fde3 	bl	8000a2c <HAL_InitTick>
 8001e66:	0003      	movs	r3, r0
}
 8001e68:	0018      	movs	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	b004      	add	sp, #16
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40022000 	.word	0x40022000
 8001e74:	00001388 	.word	0x00001388
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	fffff0ff 	.word	0xfffff0ff
 8001e80:	ffff8fff 	.word	0xffff8fff
 8001e84:	0800343c 	.word	0x0800343c
 8001e88:	20000000 	.word	0x20000000
 8001e8c:	20000004 	.word	0x20000004

08001e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e96:	4b3c      	ldr	r3, [pc, #240]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	2238      	movs	r2, #56	@ 0x38
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d10f      	bne.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001ea0:	4b39      	ldr	r3, [pc, #228]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	0adb      	lsrs	r3, r3, #11
 8001ea6:	2207      	movs	r2, #7
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2201      	movs	r2, #1
 8001eac:	409a      	lsls	r2, r3
 8001eae:	0013      	movs	r3, r2
 8001eb0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001eb2:	6839      	ldr	r1, [r7, #0]
 8001eb4:	4835      	ldr	r0, [pc, #212]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001eb6:	f7fe f925 	bl	8000104 <__udivsi3>
 8001eba:	0003      	movs	r3, r0
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	e05d      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ec0:	4b31      	ldr	r3, [pc, #196]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	2238      	movs	r2, #56	@ 0x38
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d102      	bne.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ecc:	4b30      	ldr	r3, [pc, #192]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	e054      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	2238      	movs	r2, #56	@ 0x38
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2b10      	cmp	r3, #16
 8001edc:	d138      	bne.n	8001f50 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001ede:	4b2a      	ldr	r3, [pc, #168]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ee8:	4b27      	ldr	r3, [pc, #156]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	091b      	lsrs	r3, r3, #4
 8001eee:	2207      	movs	r2, #7
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d10d      	bne.n	8001f18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	4824      	ldr	r0, [pc, #144]	@ (8001f90 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f00:	f7fe f900 	bl	8000104 <__udivsi3>
 8001f04:	0003      	movs	r3, r0
 8001f06:	0019      	movs	r1, r3
 8001f08:	4b1f      	ldr	r3, [pc, #124]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	0a1b      	lsrs	r3, r3, #8
 8001f0e:	227f      	movs	r2, #127	@ 0x7f
 8001f10:	4013      	ands	r3, r2
 8001f12:	434b      	muls	r3, r1
 8001f14:	617b      	str	r3, [r7, #20]
        break;
 8001f16:	e00d      	b.n	8001f34 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001f18:	68b9      	ldr	r1, [r7, #8]
 8001f1a:	481c      	ldr	r0, [pc, #112]	@ (8001f8c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f1c:	f7fe f8f2 	bl	8000104 <__udivsi3>
 8001f20:	0003      	movs	r3, r0
 8001f22:	0019      	movs	r1, r3
 8001f24:	4b18      	ldr	r3, [pc, #96]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	0a1b      	lsrs	r3, r3, #8
 8001f2a:	227f      	movs	r2, #127	@ 0x7f
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	434b      	muls	r3, r1
 8001f30:	617b      	str	r3, [r7, #20]
        break;
 8001f32:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001f34:	4b14      	ldr	r3, [pc, #80]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	0f5b      	lsrs	r3, r3, #29
 8001f3a:	2207      	movs	r2, #7
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	3301      	adds	r3, #1
 8001f40:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	6978      	ldr	r0, [r7, #20]
 8001f46:	f7fe f8dd 	bl	8000104 <__udivsi3>
 8001f4a:	0003      	movs	r3, r0
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	e015      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f50:	4b0d      	ldr	r3, [pc, #52]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2238      	movs	r2, #56	@ 0x38
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b20      	cmp	r3, #32
 8001f5a:	d103      	bne.n	8001f64 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001f5c:	2380      	movs	r3, #128	@ 0x80
 8001f5e:	021b      	lsls	r3, r3, #8
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	e00b      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f64:	4b08      	ldr	r3, [pc, #32]	@ (8001f88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2238      	movs	r2, #56	@ 0x38
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	2b18      	cmp	r3, #24
 8001f6e:	d103      	bne.n	8001f78 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001f70:	23fa      	movs	r3, #250	@ 0xfa
 8001f72:	01db      	lsls	r3, r3, #7
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	e001      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f7c:	693b      	ldr	r3, [r7, #16]
}
 8001f7e:	0018      	movs	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	b006      	add	sp, #24
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	46c0      	nop			@ (mov r8, r8)
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	00f42400 	.word	0x00f42400
 8001f90:	007a1200 	.word	0x007a1200

08001f94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e04a      	b.n	800203c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	223d      	movs	r2, #61	@ 0x3d
 8001faa:	5c9b      	ldrb	r3, [r3, r2]
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d107      	bne.n	8001fc2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	223c      	movs	r2, #60	@ 0x3c
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f7fe fc61 	bl	8000884 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	223d      	movs	r2, #61	@ 0x3d
 8001fc6:	2102      	movs	r1, #2
 8001fc8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	0010      	movs	r0, r2
 8001fd6:	f000 fd5d 	bl	8002a94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2248      	movs	r2, #72	@ 0x48
 8001fde:	2101      	movs	r1, #1
 8001fe0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	223e      	movs	r2, #62	@ 0x3e
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	5499      	strb	r1, [r3, r2]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	223f      	movs	r2, #63	@ 0x3f
 8001fee:	2101      	movs	r1, #1
 8001ff0:	5499      	strb	r1, [r3, r2]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2240      	movs	r2, #64	@ 0x40
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	5499      	strb	r1, [r3, r2]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2241      	movs	r2, #65	@ 0x41
 8001ffe:	2101      	movs	r1, #1
 8002000:	5499      	strb	r1, [r3, r2]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2242      	movs	r2, #66	@ 0x42
 8002006:	2101      	movs	r1, #1
 8002008:	5499      	strb	r1, [r3, r2]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2243      	movs	r2, #67	@ 0x43
 800200e:	2101      	movs	r1, #1
 8002010:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2244      	movs	r2, #68	@ 0x44
 8002016:	2101      	movs	r1, #1
 8002018:	5499      	strb	r1, [r3, r2]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2245      	movs	r2, #69	@ 0x45
 800201e:	2101      	movs	r1, #1
 8002020:	5499      	strb	r1, [r3, r2]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2246      	movs	r2, #70	@ 0x46
 8002026:	2101      	movs	r1, #1
 8002028:	5499      	strb	r1, [r3, r2]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2247      	movs	r2, #71	@ 0x47
 800202e:	2101      	movs	r1, #1
 8002030:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	223d      	movs	r2, #61	@ 0x3d
 8002036:	2101      	movs	r1, #1
 8002038:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	0018      	movs	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	b002      	add	sp, #8
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e04a      	b.n	80020ec <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	223d      	movs	r2, #61	@ 0x3d
 800205a:	5c9b      	ldrb	r3, [r3, r2]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d107      	bne.n	8002072 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	223c      	movs	r2, #60	@ 0x3c
 8002066:	2100      	movs	r1, #0
 8002068:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	0018      	movs	r0, r3
 800206e:	f000 f841 	bl	80020f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	223d      	movs	r2, #61	@ 0x3d
 8002076:	2102      	movs	r1, #2
 8002078:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3304      	adds	r3, #4
 8002082:	0019      	movs	r1, r3
 8002084:	0010      	movs	r0, r2
 8002086:	f000 fd05 	bl	8002a94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2248      	movs	r2, #72	@ 0x48
 800208e:	2101      	movs	r1, #1
 8002090:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	223e      	movs	r2, #62	@ 0x3e
 8002096:	2101      	movs	r1, #1
 8002098:	5499      	strb	r1, [r3, r2]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	223f      	movs	r2, #63	@ 0x3f
 800209e:	2101      	movs	r1, #1
 80020a0:	5499      	strb	r1, [r3, r2]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2240      	movs	r2, #64	@ 0x40
 80020a6:	2101      	movs	r1, #1
 80020a8:	5499      	strb	r1, [r3, r2]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2241      	movs	r2, #65	@ 0x41
 80020ae:	2101      	movs	r1, #1
 80020b0:	5499      	strb	r1, [r3, r2]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2242      	movs	r2, #66	@ 0x42
 80020b6:	2101      	movs	r1, #1
 80020b8:	5499      	strb	r1, [r3, r2]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2243      	movs	r2, #67	@ 0x43
 80020be:	2101      	movs	r1, #1
 80020c0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2244      	movs	r2, #68	@ 0x44
 80020c6:	2101      	movs	r1, #1
 80020c8:	5499      	strb	r1, [r3, r2]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2245      	movs	r2, #69	@ 0x45
 80020ce:	2101      	movs	r1, #1
 80020d0:	5499      	strb	r1, [r3, r2]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2246      	movs	r2, #70	@ 0x46
 80020d6:	2101      	movs	r1, #1
 80020d8:	5499      	strb	r1, [r3, r2]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2247      	movs	r2, #71	@ 0x47
 80020de:	2101      	movs	r1, #1
 80020e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	223d      	movs	r2, #61	@ 0x3d
 80020e6:	2101      	movs	r1, #1
 80020e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	0018      	movs	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	b002      	add	sp, #8
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80020fc:	46c0      	nop			@ (mov r8, r8)
 80020fe:	46bd      	mov	sp, r7
 8002100:	b002      	add	sp, #8
 8002102:	bd80      	pop	{r7, pc}

08002104 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
 8002110:	001a      	movs	r2, r3
 8002112:	1cbb      	adds	r3, r7, #2
 8002114:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002116:	2317      	movs	r3, #23
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d108      	bne.n	8002136 <HAL_TIM_PWM_Start_DMA+0x32>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	223e      	movs	r2, #62	@ 0x3e
 8002128:	5c9b      	ldrb	r3, [r3, r2]
 800212a:	b2db      	uxtb	r3, r3
 800212c:	3b02      	subs	r3, #2
 800212e:	425a      	negs	r2, r3
 8002130:	4153      	adcs	r3, r2
 8002132:	b2db      	uxtb	r3, r3
 8002134:	e037      	b.n	80021a6 <HAL_TIM_PWM_Start_DMA+0xa2>
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2b04      	cmp	r3, #4
 800213a:	d108      	bne.n	800214e <HAL_TIM_PWM_Start_DMA+0x4a>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	223f      	movs	r2, #63	@ 0x3f
 8002140:	5c9b      	ldrb	r3, [r3, r2]
 8002142:	b2db      	uxtb	r3, r3
 8002144:	3b02      	subs	r3, #2
 8002146:	425a      	negs	r2, r3
 8002148:	4153      	adcs	r3, r2
 800214a:	b2db      	uxtb	r3, r3
 800214c:	e02b      	b.n	80021a6 <HAL_TIM_PWM_Start_DMA+0xa2>
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b08      	cmp	r3, #8
 8002152:	d108      	bne.n	8002166 <HAL_TIM_PWM_Start_DMA+0x62>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2240      	movs	r2, #64	@ 0x40
 8002158:	5c9b      	ldrb	r3, [r3, r2]
 800215a:	b2db      	uxtb	r3, r3
 800215c:	3b02      	subs	r3, #2
 800215e:	425a      	negs	r2, r3
 8002160:	4153      	adcs	r3, r2
 8002162:	b2db      	uxtb	r3, r3
 8002164:	e01f      	b.n	80021a6 <HAL_TIM_PWM_Start_DMA+0xa2>
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	2b0c      	cmp	r3, #12
 800216a:	d108      	bne.n	800217e <HAL_TIM_PWM_Start_DMA+0x7a>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2241      	movs	r2, #65	@ 0x41
 8002170:	5c9b      	ldrb	r3, [r3, r2]
 8002172:	b2db      	uxtb	r3, r3
 8002174:	3b02      	subs	r3, #2
 8002176:	425a      	negs	r2, r3
 8002178:	4153      	adcs	r3, r2
 800217a:	b2db      	uxtb	r3, r3
 800217c:	e013      	b.n	80021a6 <HAL_TIM_PWM_Start_DMA+0xa2>
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2b10      	cmp	r3, #16
 8002182:	d108      	bne.n	8002196 <HAL_TIM_PWM_Start_DMA+0x92>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2242      	movs	r2, #66	@ 0x42
 8002188:	5c9b      	ldrb	r3, [r3, r2]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	3b02      	subs	r3, #2
 800218e:	425a      	negs	r2, r3
 8002190:	4153      	adcs	r3, r2
 8002192:	b2db      	uxtb	r3, r3
 8002194:	e007      	b.n	80021a6 <HAL_TIM_PWM_Start_DMA+0xa2>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2243      	movs	r2, #67	@ 0x43
 800219a:	5c9b      	ldrb	r3, [r3, r2]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	3b02      	subs	r3, #2
 80021a0:	425a      	negs	r2, r3
 80021a2:	4153      	adcs	r3, r2
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 80021aa:	2302      	movs	r3, #2
 80021ac:	e198      	b.n	80024e0 <HAL_TIM_PWM_Start_DMA+0x3dc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d108      	bne.n	80021c6 <HAL_TIM_PWM_Start_DMA+0xc2>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	223e      	movs	r2, #62	@ 0x3e
 80021b8:	5c9b      	ldrb	r3, [r3, r2]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	3b01      	subs	r3, #1
 80021be:	425a      	negs	r2, r3
 80021c0:	4153      	adcs	r3, r2
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	e037      	b.n	8002236 <HAL_TIM_PWM_Start_DMA+0x132>
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d108      	bne.n	80021de <HAL_TIM_PWM_Start_DMA+0xda>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	223f      	movs	r2, #63	@ 0x3f
 80021d0:	5c9b      	ldrb	r3, [r3, r2]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	3b01      	subs	r3, #1
 80021d6:	425a      	negs	r2, r3
 80021d8:	4153      	adcs	r3, r2
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	e02b      	b.n	8002236 <HAL_TIM_PWM_Start_DMA+0x132>
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d108      	bne.n	80021f6 <HAL_TIM_PWM_Start_DMA+0xf2>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2240      	movs	r2, #64	@ 0x40
 80021e8:	5c9b      	ldrb	r3, [r3, r2]
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	3b01      	subs	r3, #1
 80021ee:	425a      	negs	r2, r3
 80021f0:	4153      	adcs	r3, r2
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	e01f      	b.n	8002236 <HAL_TIM_PWM_Start_DMA+0x132>
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b0c      	cmp	r3, #12
 80021fa:	d108      	bne.n	800220e <HAL_TIM_PWM_Start_DMA+0x10a>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2241      	movs	r2, #65	@ 0x41
 8002200:	5c9b      	ldrb	r3, [r3, r2]
 8002202:	b2db      	uxtb	r3, r3
 8002204:	3b01      	subs	r3, #1
 8002206:	425a      	negs	r2, r3
 8002208:	4153      	adcs	r3, r2
 800220a:	b2db      	uxtb	r3, r3
 800220c:	e013      	b.n	8002236 <HAL_TIM_PWM_Start_DMA+0x132>
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	2b10      	cmp	r3, #16
 8002212:	d108      	bne.n	8002226 <HAL_TIM_PWM_Start_DMA+0x122>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2242      	movs	r2, #66	@ 0x42
 8002218:	5c9b      	ldrb	r3, [r3, r2]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	3b01      	subs	r3, #1
 800221e:	425a      	negs	r2, r3
 8002220:	4153      	adcs	r3, r2
 8002222:	b2db      	uxtb	r3, r3
 8002224:	e007      	b.n	8002236 <HAL_TIM_PWM_Start_DMA+0x132>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2243      	movs	r2, #67	@ 0x43
 800222a:	5c9b      	ldrb	r3, [r3, r2]
 800222c:	b2db      	uxtb	r3, r3
 800222e:	3b01      	subs	r3, #1
 8002230:	425a      	negs	r2, r3
 8002232:	4153      	adcs	r3, r2
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d035      	beq.n	80022a6 <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_TIM_PWM_Start_DMA+0x144>
 8002240:	1cbb      	adds	r3, r7, #2
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e149      	b.n	80024e0 <HAL_TIM_PWM_Start_DMA+0x3dc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d104      	bne.n	800225c <HAL_TIM_PWM_Start_DMA+0x158>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	223e      	movs	r2, #62	@ 0x3e
 8002256:	2102      	movs	r1, #2
 8002258:	5499      	strb	r1, [r3, r2]
 800225a:	e026      	b.n	80022aa <HAL_TIM_PWM_Start_DMA+0x1a6>
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b04      	cmp	r3, #4
 8002260:	d104      	bne.n	800226c <HAL_TIM_PWM_Start_DMA+0x168>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	223f      	movs	r2, #63	@ 0x3f
 8002266:	2102      	movs	r1, #2
 8002268:	5499      	strb	r1, [r3, r2]
 800226a:	e01e      	b.n	80022aa <HAL_TIM_PWM_Start_DMA+0x1a6>
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b08      	cmp	r3, #8
 8002270:	d104      	bne.n	800227c <HAL_TIM_PWM_Start_DMA+0x178>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2240      	movs	r2, #64	@ 0x40
 8002276:	2102      	movs	r1, #2
 8002278:	5499      	strb	r1, [r3, r2]
 800227a:	e016      	b.n	80022aa <HAL_TIM_PWM_Start_DMA+0x1a6>
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2b0c      	cmp	r3, #12
 8002280:	d104      	bne.n	800228c <HAL_TIM_PWM_Start_DMA+0x188>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2241      	movs	r2, #65	@ 0x41
 8002286:	2102      	movs	r1, #2
 8002288:	5499      	strb	r1, [r3, r2]
 800228a:	e00e      	b.n	80022aa <HAL_TIM_PWM_Start_DMA+0x1a6>
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2b10      	cmp	r3, #16
 8002290:	d104      	bne.n	800229c <HAL_TIM_PWM_Start_DMA+0x198>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2242      	movs	r2, #66	@ 0x42
 8002296:	2102      	movs	r1, #2
 8002298:	5499      	strb	r1, [r3, r2]
 800229a:	e006      	b.n	80022aa <HAL_TIM_PWM_Start_DMA+0x1a6>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2243      	movs	r2, #67	@ 0x43
 80022a0:	2102      	movs	r1, #2
 80022a2:	5499      	strb	r1, [r3, r2]
 80022a4:	e001      	b.n	80022aa <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e11a      	b.n	80024e0 <HAL_TIM_PWM_Start_DMA+0x3dc>
  }

  switch (Channel)
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	2b0c      	cmp	r3, #12
 80022ae:	d100      	bne.n	80022b2 <HAL_TIM_PWM_Start_DMA+0x1ae>
 80022b0:	e080      	b.n	80023b4 <HAL_TIM_PWM_Start_DMA+0x2b0>
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2b0c      	cmp	r3, #12
 80022b6:	d900      	bls.n	80022ba <HAL_TIM_PWM_Start_DMA+0x1b6>
 80022b8:	e0a1      	b.n	80023fe <HAL_TIM_PWM_Start_DMA+0x2fa>
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d054      	beq.n	800236a <HAL_TIM_PWM_Start_DMA+0x266>
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d900      	bls.n	80022c8 <HAL_TIM_PWM_Start_DMA+0x1c4>
 80022c6:	e09a      	b.n	80023fe <HAL_TIM_PWM_Start_DMA+0x2fa>
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_TIM_PWM_Start_DMA+0x1d2>
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d025      	beq.n	8002320 <HAL_TIM_PWM_Start_DMA+0x21c>
 80022d4:	e093      	b.n	80023fe <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022da:	4a83      	ldr	r2, [pc, #524]	@ (80024e8 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80022dc:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e2:	4a82      	ldr	r2, [pc, #520]	@ (80024ec <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80022e4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ea:	4a81      	ldr	r2, [pc, #516]	@ (80024f0 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80022ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	3334      	adds	r3, #52	@ 0x34
 80022fa:	001a      	movs	r2, r3
 80022fc:	1cbb      	adds	r3, r7, #2
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	f7fe fdbe 	bl	8000e80 <HAL_DMA_Start_IT>
 8002304:	1e03      	subs	r3, r0, #0
 8002306:	d001      	beq.n	800230c <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0e9      	b.n	80024e0 <HAL_TIM_PWM_Start_DMA+0x3dc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68da      	ldr	r2, [r3, #12]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2180      	movs	r1, #128	@ 0x80
 8002318:	0089      	lsls	r1, r1, #2
 800231a:	430a      	orrs	r2, r1
 800231c:	60da      	str	r2, [r3, #12]
      break;
 800231e:	e073      	b.n	8002408 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002324:	4a70      	ldr	r2, [pc, #448]	@ (80024e8 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8002326:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232c:	4a6f      	ldr	r2, [pc, #444]	@ (80024ec <HAL_TIM_PWM_Start_DMA+0x3e8>)
 800232e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002334:	4a6e      	ldr	r2, [pc, #440]	@ (80024f0 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8002336:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	3338      	adds	r3, #56	@ 0x38
 8002344:	001a      	movs	r2, r3
 8002346:	1cbb      	adds	r3, r7, #2
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	f7fe fd99 	bl	8000e80 <HAL_DMA_Start_IT>
 800234e:	1e03      	subs	r3, r0, #0
 8002350:	d001      	beq.n	8002356 <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e0c4      	b.n	80024e0 <HAL_TIM_PWM_Start_DMA+0x3dc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68da      	ldr	r2, [r3, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2180      	movs	r1, #128	@ 0x80
 8002362:	00c9      	lsls	r1, r1, #3
 8002364:	430a      	orrs	r2, r1
 8002366:	60da      	str	r2, [r3, #12]
      break;
 8002368:	e04e      	b.n	8002408 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800236e:	4a5e      	ldr	r2, [pc, #376]	@ (80024e8 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8002370:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002376:	4a5d      	ldr	r2, [pc, #372]	@ (80024ec <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8002378:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237e:	4a5c      	ldr	r2, [pc, #368]	@ (80024f0 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8002380:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	333c      	adds	r3, #60	@ 0x3c
 800238e:	001a      	movs	r2, r3
 8002390:	1cbb      	adds	r3, r7, #2
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	f7fe fd74 	bl	8000e80 <HAL_DMA_Start_IT>
 8002398:	1e03      	subs	r3, r0, #0
 800239a:	d001      	beq.n	80023a0 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e09f      	b.n	80024e0 <HAL_TIM_PWM_Start_DMA+0x3dc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2180      	movs	r1, #128	@ 0x80
 80023ac:	0109      	lsls	r1, r1, #4
 80023ae:	430a      	orrs	r2, r1
 80023b0:	60da      	str	r2, [r3, #12]
      break;
 80023b2:	e029      	b.n	8002408 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b8:	4a4b      	ldr	r2, [pc, #300]	@ (80024e8 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80023ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c0:	4a4a      	ldr	r2, [pc, #296]	@ (80024ec <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80023c2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c8:	4a49      	ldr	r2, [pc, #292]	@ (80024f0 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80023ca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	3340      	adds	r3, #64	@ 0x40
 80023d8:	001a      	movs	r2, r3
 80023da:	1cbb      	adds	r3, r7, #2
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	f7fe fd4f 	bl	8000e80 <HAL_DMA_Start_IT>
 80023e2:	1e03      	subs	r3, r0, #0
 80023e4:	d001      	beq.n	80023ea <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e07a      	b.n	80024e0 <HAL_TIM_PWM_Start_DMA+0x3dc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2180      	movs	r1, #128	@ 0x80
 80023f6:	0149      	lsls	r1, r1, #5
 80023f8:	430a      	orrs	r2, r1
 80023fa:	60da      	str	r2, [r3, #12]
      break;
 80023fc:	e004      	b.n	8002408 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 80023fe:	2317      	movs	r3, #23
 8002400:	18fb      	adds	r3, r7, r3
 8002402:	2201      	movs	r2, #1
 8002404:	701a      	strb	r2, [r3, #0]
      break;
 8002406:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8002408:	2317      	movs	r3, #23
 800240a:	18fb      	adds	r3, r7, r3
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d163      	bne.n	80024da <HAL_TIM_PWM_Start_DMA+0x3d6>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68b9      	ldr	r1, [r7, #8]
 8002418:	2201      	movs	r2, #1
 800241a:	0018      	movs	r0, r3
 800241c:	f000 ff32 	bl	8003284 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a33      	ldr	r2, [pc, #204]	@ (80024f4 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d00e      	beq.n	8002448 <HAL_TIM_PWM_Start_DMA+0x344>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a32      	ldr	r2, [pc, #200]	@ (80024f8 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d009      	beq.n	8002448 <HAL_TIM_PWM_Start_DMA+0x344>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a30      	ldr	r2, [pc, #192]	@ (80024fc <HAL_TIM_PWM_Start_DMA+0x3f8>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d004      	beq.n	8002448 <HAL_TIM_PWM_Start_DMA+0x344>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a2f      	ldr	r2, [pc, #188]	@ (8002500 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d101      	bne.n	800244c <HAL_TIM_PWM_Start_DMA+0x348>
 8002448:	2301      	movs	r3, #1
 800244a:	e000      	b.n	800244e <HAL_TIM_PWM_Start_DMA+0x34a>
 800244c:	2300      	movs	r3, #0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d008      	beq.n	8002464 <HAL_TIM_PWM_Start_DMA+0x360>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2180      	movs	r1, #128	@ 0x80
 800245e:	0209      	lsls	r1, r1, #8
 8002460:	430a      	orrs	r2, r1
 8002462:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a22      	ldr	r2, [pc, #136]	@ (80024f4 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d014      	beq.n	8002498 <HAL_TIM_PWM_Start_DMA+0x394>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	2380      	movs	r3, #128	@ 0x80
 8002474:	05db      	lsls	r3, r3, #23
 8002476:	429a      	cmp	r2, r3
 8002478:	d00e      	beq.n	8002498 <HAL_TIM_PWM_Start_DMA+0x394>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a21      	ldr	r2, [pc, #132]	@ (8002504 <HAL_TIM_PWM_Start_DMA+0x400>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d009      	beq.n	8002498 <HAL_TIM_PWM_Start_DMA+0x394>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a1f      	ldr	r2, [pc, #124]	@ (8002508 <HAL_TIM_PWM_Start_DMA+0x404>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d004      	beq.n	8002498 <HAL_TIM_PWM_Start_DMA+0x394>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a19      	ldr	r2, [pc, #100]	@ (80024f8 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d116      	bne.n	80024c6 <HAL_TIM_PWM_Start_DMA+0x3c2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	4a1b      	ldr	r2, [pc, #108]	@ (800250c <HAL_TIM_PWM_Start_DMA+0x408>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	2b06      	cmp	r3, #6
 80024a8:	d016      	beq.n	80024d8 <HAL_TIM_PWM_Start_DMA+0x3d4>
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	2380      	movs	r3, #128	@ 0x80
 80024ae:	025b      	lsls	r3, r3, #9
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d011      	beq.n	80024d8 <HAL_TIM_PWM_Start_DMA+0x3d4>
      {
        __HAL_TIM_ENABLE(htim);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2101      	movs	r1, #1
 80024c0:	430a      	orrs	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024c4:	e008      	b.n	80024d8 <HAL_TIM_PWM_Start_DMA+0x3d4>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2101      	movs	r1, #1
 80024d2:	430a      	orrs	r2, r1
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	e000      	b.n	80024da <HAL_TIM_PWM_Start_DMA+0x3d6>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 80024da:	2317      	movs	r3, #23
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	781b      	ldrb	r3, [r3, #0]
}
 80024e0:	0018      	movs	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	b006      	add	sp, #24
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	08002981 	.word	0x08002981
 80024ec:	08002a2b 	.word	0x08002a2b
 80024f0:	080028ed 	.word	0x080028ed
 80024f4:	40012c00 	.word	0x40012c00
 80024f8:	40014000 	.word	0x40014000
 80024fc:	40014400 	.word	0x40014400
 8002500:	40014800 	.word	0x40014800
 8002504:	40000400 	.word	0x40000400
 8002508:	40000800 	.word	0x40000800
 800250c:	00010007 	.word	0x00010007

08002510 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800251c:	2317      	movs	r3, #23
 800251e:	18fb      	adds	r3, r7, r3
 8002520:	2200      	movs	r2, #0
 8002522:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	223c      	movs	r2, #60	@ 0x3c
 8002528:	5c9b      	ldrb	r3, [r3, r2]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d101      	bne.n	8002532 <HAL_TIM_PWM_ConfigChannel+0x22>
 800252e:	2302      	movs	r3, #2
 8002530:	e0e5      	b.n	80026fe <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	223c      	movs	r2, #60	@ 0x3c
 8002536:	2101      	movs	r1, #1
 8002538:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b14      	cmp	r3, #20
 800253e:	d900      	bls.n	8002542 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002540:	e0d1      	b.n	80026e6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	009a      	lsls	r2, r3, #2
 8002546:	4b70      	ldr	r3, [pc, #448]	@ (8002708 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002548:	18d3      	adds	r3, r2, r3
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	0011      	movs	r1, r2
 8002556:	0018      	movs	r0, r3
 8002558:	f000 fb34 	bl	8002bc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	699a      	ldr	r2, [r3, #24]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2108      	movs	r1, #8
 8002568:	430a      	orrs	r2, r1
 800256a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	699a      	ldr	r2, [r3, #24]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2104      	movs	r1, #4
 8002578:	438a      	bics	r2, r1
 800257a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6999      	ldr	r1, [r3, #24]
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	619a      	str	r2, [r3, #24]
      break;
 800258e:	e0af      	b.n	80026f0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	0011      	movs	r1, r2
 8002598:	0018      	movs	r0, r3
 800259a:	f000 fb9d 	bl	8002cd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	699a      	ldr	r2, [r3, #24]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2180      	movs	r1, #128	@ 0x80
 80025aa:	0109      	lsls	r1, r1, #4
 80025ac:	430a      	orrs	r2, r1
 80025ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	699a      	ldr	r2, [r3, #24]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4954      	ldr	r1, [pc, #336]	@ (800270c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80025bc:	400a      	ands	r2, r1
 80025be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6999      	ldr	r1, [r3, #24]
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	021a      	lsls	r2, r3, #8
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	619a      	str	r2, [r3, #24]
      break;
 80025d4:	e08c      	b.n	80026f0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	0011      	movs	r1, r2
 80025de:	0018      	movs	r0, r3
 80025e0:	f000 fbfe 	bl	8002de0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	69da      	ldr	r2, [r3, #28]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2108      	movs	r1, #8
 80025f0:	430a      	orrs	r2, r1
 80025f2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	69da      	ldr	r2, [r3, #28]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2104      	movs	r1, #4
 8002600:	438a      	bics	r2, r1
 8002602:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	69d9      	ldr	r1, [r3, #28]
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	691a      	ldr	r2, [r3, #16]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	61da      	str	r2, [r3, #28]
      break;
 8002616:	e06b      	b.n	80026f0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	0011      	movs	r1, r2
 8002620:	0018      	movs	r0, r3
 8002622:	f000 fc65 	bl	8002ef0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	69da      	ldr	r2, [r3, #28]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2180      	movs	r1, #128	@ 0x80
 8002632:	0109      	lsls	r1, r1, #4
 8002634:	430a      	orrs	r2, r1
 8002636:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	69da      	ldr	r2, [r3, #28]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4932      	ldr	r1, [pc, #200]	@ (800270c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002644:	400a      	ands	r2, r1
 8002646:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	69d9      	ldr	r1, [r3, #28]
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	021a      	lsls	r2, r3, #8
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	61da      	str	r2, [r3, #28]
      break;
 800265c:	e048      	b.n	80026f0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	0011      	movs	r1, r2
 8002666:	0018      	movs	r0, r3
 8002668:	f000 fcac 	bl	8002fc4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2108      	movs	r1, #8
 8002678:	430a      	orrs	r2, r1
 800267a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2104      	movs	r1, #4
 8002688:	438a      	bics	r2, r1
 800268a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	691a      	ldr	r2, [r3, #16]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800269e:	e027      	b.n	80026f0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	0011      	movs	r1, r2
 80026a8:	0018      	movs	r0, r3
 80026aa:	f000 fceb 	bl	8003084 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2180      	movs	r1, #128	@ 0x80
 80026ba:	0109      	lsls	r1, r1, #4
 80026bc:	430a      	orrs	r2, r1
 80026be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4910      	ldr	r1, [pc, #64]	@ (800270c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80026cc:	400a      	ands	r2, r1
 80026ce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	021a      	lsls	r2, r3, #8
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80026e4:	e004      	b.n	80026f0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80026e6:	2317      	movs	r3, #23
 80026e8:	18fb      	adds	r3, r7, r3
 80026ea:	2201      	movs	r2, #1
 80026ec:	701a      	strb	r2, [r3, #0]
      break;
 80026ee:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	223c      	movs	r2, #60	@ 0x3c
 80026f4:	2100      	movs	r1, #0
 80026f6:	5499      	strb	r1, [r3, r2]

  return status;
 80026f8:	2317      	movs	r3, #23
 80026fa:	18fb      	adds	r3, r7, r3
 80026fc:	781b      	ldrb	r3, [r3, #0]
}
 80026fe:	0018      	movs	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	b006      	add	sp, #24
 8002704:	bd80      	pop	{r7, pc}
 8002706:	46c0      	nop			@ (mov r8, r8)
 8002708:	0800347c 	.word	0x0800347c
 800270c:	fffffbff 	.word	0xfffffbff

08002710 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800271a:	230f      	movs	r3, #15
 800271c:	18fb      	adds	r3, r7, r3
 800271e:	2200      	movs	r2, #0
 8002720:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	223c      	movs	r2, #60	@ 0x3c
 8002726:	5c9b      	ldrb	r3, [r3, r2]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_TIM_ConfigClockSource+0x20>
 800272c:	2302      	movs	r3, #2
 800272e:	e0bc      	b.n	80028aa <HAL_TIM_ConfigClockSource+0x19a>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	223c      	movs	r2, #60	@ 0x3c
 8002734:	2101      	movs	r1, #1
 8002736:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	223d      	movs	r2, #61	@ 0x3d
 800273c:	2102      	movs	r1, #2
 800273e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	4a5a      	ldr	r2, [pc, #360]	@ (80028b4 <HAL_TIM_ConfigClockSource+0x1a4>)
 800274c:	4013      	ands	r3, r2
 800274e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	4a59      	ldr	r2, [pc, #356]	@ (80028b8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002754:	4013      	ands	r3, r2
 8002756:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2280      	movs	r2, #128	@ 0x80
 8002766:	0192      	lsls	r2, r2, #6
 8002768:	4293      	cmp	r3, r2
 800276a:	d040      	beq.n	80027ee <HAL_TIM_ConfigClockSource+0xde>
 800276c:	2280      	movs	r2, #128	@ 0x80
 800276e:	0192      	lsls	r2, r2, #6
 8002770:	4293      	cmp	r3, r2
 8002772:	d900      	bls.n	8002776 <HAL_TIM_ConfigClockSource+0x66>
 8002774:	e088      	b.n	8002888 <HAL_TIM_ConfigClockSource+0x178>
 8002776:	2280      	movs	r2, #128	@ 0x80
 8002778:	0152      	lsls	r2, r2, #5
 800277a:	4293      	cmp	r3, r2
 800277c:	d100      	bne.n	8002780 <HAL_TIM_ConfigClockSource+0x70>
 800277e:	e088      	b.n	8002892 <HAL_TIM_ConfigClockSource+0x182>
 8002780:	2280      	movs	r2, #128	@ 0x80
 8002782:	0152      	lsls	r2, r2, #5
 8002784:	4293      	cmp	r3, r2
 8002786:	d900      	bls.n	800278a <HAL_TIM_ConfigClockSource+0x7a>
 8002788:	e07e      	b.n	8002888 <HAL_TIM_ConfigClockSource+0x178>
 800278a:	2b70      	cmp	r3, #112	@ 0x70
 800278c:	d018      	beq.n	80027c0 <HAL_TIM_ConfigClockSource+0xb0>
 800278e:	d900      	bls.n	8002792 <HAL_TIM_ConfigClockSource+0x82>
 8002790:	e07a      	b.n	8002888 <HAL_TIM_ConfigClockSource+0x178>
 8002792:	2b60      	cmp	r3, #96	@ 0x60
 8002794:	d04f      	beq.n	8002836 <HAL_TIM_ConfigClockSource+0x126>
 8002796:	d900      	bls.n	800279a <HAL_TIM_ConfigClockSource+0x8a>
 8002798:	e076      	b.n	8002888 <HAL_TIM_ConfigClockSource+0x178>
 800279a:	2b50      	cmp	r3, #80	@ 0x50
 800279c:	d03b      	beq.n	8002816 <HAL_TIM_ConfigClockSource+0x106>
 800279e:	d900      	bls.n	80027a2 <HAL_TIM_ConfigClockSource+0x92>
 80027a0:	e072      	b.n	8002888 <HAL_TIM_ConfigClockSource+0x178>
 80027a2:	2b40      	cmp	r3, #64	@ 0x40
 80027a4:	d057      	beq.n	8002856 <HAL_TIM_ConfigClockSource+0x146>
 80027a6:	d900      	bls.n	80027aa <HAL_TIM_ConfigClockSource+0x9a>
 80027a8:	e06e      	b.n	8002888 <HAL_TIM_ConfigClockSource+0x178>
 80027aa:	2b30      	cmp	r3, #48	@ 0x30
 80027ac:	d063      	beq.n	8002876 <HAL_TIM_ConfigClockSource+0x166>
 80027ae:	d86b      	bhi.n	8002888 <HAL_TIM_ConfigClockSource+0x178>
 80027b0:	2b20      	cmp	r3, #32
 80027b2:	d060      	beq.n	8002876 <HAL_TIM_ConfigClockSource+0x166>
 80027b4:	d868      	bhi.n	8002888 <HAL_TIM_ConfigClockSource+0x178>
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d05d      	beq.n	8002876 <HAL_TIM_ConfigClockSource+0x166>
 80027ba:	2b10      	cmp	r3, #16
 80027bc:	d05b      	beq.n	8002876 <HAL_TIM_ConfigClockSource+0x166>
 80027be:	e063      	b.n	8002888 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027d0:	f000 fd38 	bl	8003244 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2277      	movs	r2, #119	@ 0x77
 80027e0:	4313      	orrs	r3, r2
 80027e2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	609a      	str	r2, [r3, #8]
      break;
 80027ec:	e052      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027fe:	f000 fd21 	bl	8003244 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2180      	movs	r1, #128	@ 0x80
 800280e:	01c9      	lsls	r1, r1, #7
 8002810:	430a      	orrs	r2, r1
 8002812:	609a      	str	r2, [r3, #8]
      break;
 8002814:	e03e      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002822:	001a      	movs	r2, r3
 8002824:	f000 fc92 	bl	800314c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2150      	movs	r1, #80	@ 0x50
 800282e:	0018      	movs	r0, r3
 8002830:	f000 fcec 	bl	800320c <TIM_ITRx_SetConfig>
      break;
 8002834:	e02e      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002842:	001a      	movs	r2, r3
 8002844:	f000 fcb0 	bl	80031a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2160      	movs	r1, #96	@ 0x60
 800284e:	0018      	movs	r0, r3
 8002850:	f000 fcdc 	bl	800320c <TIM_ITRx_SetConfig>
      break;
 8002854:	e01e      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002862:	001a      	movs	r2, r3
 8002864:	f000 fc72 	bl	800314c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2140      	movs	r1, #64	@ 0x40
 800286e:	0018      	movs	r0, r3
 8002870:	f000 fccc 	bl	800320c <TIM_ITRx_SetConfig>
      break;
 8002874:	e00e      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	0019      	movs	r1, r3
 8002880:	0010      	movs	r0, r2
 8002882:	f000 fcc3 	bl	800320c <TIM_ITRx_SetConfig>
      break;
 8002886:	e005      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002888:	230f      	movs	r3, #15
 800288a:	18fb      	adds	r3, r7, r3
 800288c:	2201      	movs	r2, #1
 800288e:	701a      	strb	r2, [r3, #0]
      break;
 8002890:	e000      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002892:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	223d      	movs	r2, #61	@ 0x3d
 8002898:	2101      	movs	r1, #1
 800289a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	223c      	movs	r2, #60	@ 0x3c
 80028a0:	2100      	movs	r1, #0
 80028a2:	5499      	strb	r1, [r3, r2]

  return status;
 80028a4:	230f      	movs	r3, #15
 80028a6:	18fb      	adds	r3, r7, r3
 80028a8:	781b      	ldrb	r3, [r3, #0]
}
 80028aa:	0018      	movs	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	b004      	add	sp, #16
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	46c0      	nop			@ (mov r8, r8)
 80028b4:	ffceff88 	.word	0xffceff88
 80028b8:	ffff00ff 	.word	0xffff00ff

080028bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028c4:	46c0      	nop			@ (mov r8, r8)
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b002      	add	sp, #8
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80028d4:	46c0      	nop			@ (mov r8, r8)
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b002      	add	sp, #8
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80028e4:	46c0      	nop			@ (mov r8, r8)
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b002      	add	sp, #8
 80028ea:	bd80      	pop	{r7, pc}

080028ec <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	429a      	cmp	r2, r3
 8002902:	d107      	bne.n	8002914 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2201      	movs	r2, #1
 8002908:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	223e      	movs	r2, #62	@ 0x3e
 800290e:	2101      	movs	r1, #1
 8002910:	5499      	strb	r1, [r3, r2]
 8002912:	e02a      	b.n	800296a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	429a      	cmp	r2, r3
 800291c:	d107      	bne.n	800292e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2202      	movs	r2, #2
 8002922:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	223f      	movs	r2, #63	@ 0x3f
 8002928:	2101      	movs	r1, #1
 800292a:	5499      	strb	r1, [r3, r2]
 800292c:	e01d      	b.n	800296a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	429a      	cmp	r2, r3
 8002936:	d107      	bne.n	8002948 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2204      	movs	r2, #4
 800293c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2240      	movs	r2, #64	@ 0x40
 8002942:	2101      	movs	r1, #1
 8002944:	5499      	strb	r1, [r3, r2]
 8002946:	e010      	b.n	800296a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	429a      	cmp	r2, r3
 8002950:	d107      	bne.n	8002962 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2208      	movs	r2, #8
 8002956:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2241      	movs	r2, #65	@ 0x41
 800295c:	2101      	movs	r1, #1
 800295e:	5499      	strb	r1, [r3, r2]
 8002960:	e003      	b.n	800296a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	223d      	movs	r2, #61	@ 0x3d
 8002966:	2101      	movs	r1, #1
 8002968:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	0018      	movs	r0, r3
 800296e:	f7ff ffb5 	bl	80028dc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	771a      	strb	r2, [r3, #28]
}
 8002978:	46c0      	nop			@ (mov r8, r8)
 800297a:	46bd      	mov	sp, r7
 800297c:	b004      	add	sp, #16
 800297e:	bd80      	pop	{r7, pc}

08002980 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800298c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	429a      	cmp	r2, r3
 8002996:	d10b      	bne.n	80029b0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2201      	movs	r2, #1
 800299c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d136      	bne.n	8002a14 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	223e      	movs	r2, #62	@ 0x3e
 80029aa:	2101      	movs	r1, #1
 80029ac:	5499      	strb	r1, [r3, r2]
 80029ae:	e031      	b.n	8002a14 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d10b      	bne.n	80029d2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2202      	movs	r2, #2
 80029be:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d125      	bne.n	8002a14 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	223f      	movs	r2, #63	@ 0x3f
 80029cc:	2101      	movs	r1, #1
 80029ce:	5499      	strb	r1, [r3, r2]
 80029d0:	e020      	b.n	8002a14 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d10b      	bne.n	80029f4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2204      	movs	r2, #4
 80029e0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d114      	bne.n	8002a14 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2240      	movs	r2, #64	@ 0x40
 80029ee:	2101      	movs	r1, #1
 80029f0:	5499      	strb	r1, [r3, r2]
 80029f2:	e00f      	b.n	8002a14 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d10a      	bne.n	8002a14 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2208      	movs	r2, #8
 8002a02:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d103      	bne.n	8002a14 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2241      	movs	r2, #65	@ 0x41
 8002a10:	2101      	movs	r1, #1
 8002a12:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	0018      	movs	r0, r3
 8002a18:	f7ff ff50 	bl	80028bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	771a      	strb	r2, [r3, #28]
}
 8002a22:	46c0      	nop			@ (mov r8, r8)
 8002a24:	46bd      	mov	sp, r7
 8002a26:	b004      	add	sp, #16
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b084      	sub	sp, #16
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a36:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d103      	bne.n	8002a4a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2201      	movs	r2, #1
 8002a46:	771a      	strb	r2, [r3, #28]
 8002a48:	e019      	b.n	8002a7e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d103      	bne.n	8002a5c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2202      	movs	r2, #2
 8002a58:	771a      	strb	r2, [r3, #28]
 8002a5a:	e010      	b.n	8002a7e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d103      	bne.n	8002a6e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2204      	movs	r2, #4
 8002a6a:	771a      	strb	r2, [r3, #28]
 8002a6c:	e007      	b.n	8002a7e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d102      	bne.n	8002a7e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2208      	movs	r2, #8
 8002a7c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	0018      	movs	r0, r3
 8002a82:	f7ff ff23 	bl	80028cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	771a      	strb	r2, [r3, #28]
}
 8002a8c:	46c0      	nop			@ (mov r8, r8)
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	b004      	add	sp, #16
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a3f      	ldr	r2, [pc, #252]	@ (8002ba4 <TIM_Base_SetConfig+0x110>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d00c      	beq.n	8002ac6 <TIM_Base_SetConfig+0x32>
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	2380      	movs	r3, #128	@ 0x80
 8002ab0:	05db      	lsls	r3, r3, #23
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d007      	beq.n	8002ac6 <TIM_Base_SetConfig+0x32>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a3b      	ldr	r2, [pc, #236]	@ (8002ba8 <TIM_Base_SetConfig+0x114>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d003      	beq.n	8002ac6 <TIM_Base_SetConfig+0x32>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a3a      	ldr	r2, [pc, #232]	@ (8002bac <TIM_Base_SetConfig+0x118>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d108      	bne.n	8002ad8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2270      	movs	r2, #112	@ 0x70
 8002aca:	4393      	bics	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a32      	ldr	r2, [pc, #200]	@ (8002ba4 <TIM_Base_SetConfig+0x110>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d01c      	beq.n	8002b1a <TIM_Base_SetConfig+0x86>
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	2380      	movs	r3, #128	@ 0x80
 8002ae4:	05db      	lsls	r3, r3, #23
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d017      	beq.n	8002b1a <TIM_Base_SetConfig+0x86>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a2e      	ldr	r2, [pc, #184]	@ (8002ba8 <TIM_Base_SetConfig+0x114>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d013      	beq.n	8002b1a <TIM_Base_SetConfig+0x86>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a2d      	ldr	r2, [pc, #180]	@ (8002bac <TIM_Base_SetConfig+0x118>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d00f      	beq.n	8002b1a <TIM_Base_SetConfig+0x86>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a2c      	ldr	r2, [pc, #176]	@ (8002bb0 <TIM_Base_SetConfig+0x11c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d00b      	beq.n	8002b1a <TIM_Base_SetConfig+0x86>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a2b      	ldr	r2, [pc, #172]	@ (8002bb4 <TIM_Base_SetConfig+0x120>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d007      	beq.n	8002b1a <TIM_Base_SetConfig+0x86>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a2a      	ldr	r2, [pc, #168]	@ (8002bb8 <TIM_Base_SetConfig+0x124>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d003      	beq.n	8002b1a <TIM_Base_SetConfig+0x86>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a29      	ldr	r2, [pc, #164]	@ (8002bbc <TIM_Base_SetConfig+0x128>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d108      	bne.n	8002b2c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4a28      	ldr	r2, [pc, #160]	@ (8002bc0 <TIM_Base_SetConfig+0x12c>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2280      	movs	r2, #128	@ 0x80
 8002b30:	4393      	bics	r3, r2
 8002b32:	001a      	movs	r2, r3
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a13      	ldr	r2, [pc, #76]	@ (8002ba4 <TIM_Base_SetConfig+0x110>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d00b      	beq.n	8002b72 <TIM_Base_SetConfig+0xde>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a15      	ldr	r2, [pc, #84]	@ (8002bb4 <TIM_Base_SetConfig+0x120>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d007      	beq.n	8002b72 <TIM_Base_SetConfig+0xde>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a14      	ldr	r2, [pc, #80]	@ (8002bb8 <TIM_Base_SetConfig+0x124>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d003      	beq.n	8002b72 <TIM_Base_SetConfig+0xde>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a13      	ldr	r2, [pc, #76]	@ (8002bbc <TIM_Base_SetConfig+0x128>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d103      	bne.n	8002b7a <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	691a      	ldr	r2, [r3, #16]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	2201      	movs	r2, #1
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d106      	bne.n	8002b9a <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	2201      	movs	r2, #1
 8002b92:	4393      	bics	r3, r2
 8002b94:	001a      	movs	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	611a      	str	r2, [r3, #16]
  }
}
 8002b9a:	46c0      	nop			@ (mov r8, r8)
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	b004      	add	sp, #16
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	46c0      	nop			@ (mov r8, r8)
 8002ba4:	40012c00 	.word	0x40012c00
 8002ba8:	40000400 	.word	0x40000400
 8002bac:	40000800 	.word	0x40000800
 8002bb0:	40002000 	.word	0x40002000
 8002bb4:	40014000 	.word	0x40014000
 8002bb8:	40014400 	.word	0x40014400
 8002bbc:	40014800 	.word	0x40014800
 8002bc0:	fffffcff 	.word	0xfffffcff

08002bc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	4393      	bics	r3, r2
 8002bdc:	001a      	movs	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	4a32      	ldr	r2, [pc, #200]	@ (8002cbc <TIM_OC1_SetConfig+0xf8>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2203      	movs	r2, #3
 8002bfa:	4393      	bics	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	4393      	bics	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a28      	ldr	r2, [pc, #160]	@ (8002cc0 <TIM_OC1_SetConfig+0xfc>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00b      	beq.n	8002c3a <TIM_OC1_SetConfig+0x76>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a27      	ldr	r2, [pc, #156]	@ (8002cc4 <TIM_OC1_SetConfig+0x100>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d007      	beq.n	8002c3a <TIM_OC1_SetConfig+0x76>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a26      	ldr	r2, [pc, #152]	@ (8002cc8 <TIM_OC1_SetConfig+0x104>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d003      	beq.n	8002c3a <TIM_OC1_SetConfig+0x76>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a25      	ldr	r2, [pc, #148]	@ (8002ccc <TIM_OC1_SetConfig+0x108>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d10c      	bne.n	8002c54 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2208      	movs	r2, #8
 8002c3e:	4393      	bics	r3, r2
 8002c40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	2204      	movs	r2, #4
 8002c50:	4393      	bics	r3, r2
 8002c52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a1a      	ldr	r2, [pc, #104]	@ (8002cc0 <TIM_OC1_SetConfig+0xfc>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d00b      	beq.n	8002c74 <TIM_OC1_SetConfig+0xb0>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a19      	ldr	r2, [pc, #100]	@ (8002cc4 <TIM_OC1_SetConfig+0x100>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d007      	beq.n	8002c74 <TIM_OC1_SetConfig+0xb0>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a18      	ldr	r2, [pc, #96]	@ (8002cc8 <TIM_OC1_SetConfig+0x104>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d003      	beq.n	8002c74 <TIM_OC1_SetConfig+0xb0>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a17      	ldr	r2, [pc, #92]	@ (8002ccc <TIM_OC1_SetConfig+0x108>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d111      	bne.n	8002c98 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	4a16      	ldr	r2, [pc, #88]	@ (8002cd0 <TIM_OC1_SetConfig+0x10c>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4a15      	ldr	r2, [pc, #84]	@ (8002cd4 <TIM_OC1_SetConfig+0x110>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	621a      	str	r2, [r3, #32]
}
 8002cb2:	46c0      	nop			@ (mov r8, r8)
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	b006      	add	sp, #24
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	46c0      	nop			@ (mov r8, r8)
 8002cbc:	fffeff8f 	.word	0xfffeff8f
 8002cc0:	40012c00 	.word	0x40012c00
 8002cc4:	40014000 	.word	0x40014000
 8002cc8:	40014400 	.word	0x40014400
 8002ccc:	40014800 	.word	0x40014800
 8002cd0:	fffffeff 	.word	0xfffffeff
 8002cd4:	fffffdff 	.word	0xfffffdff

08002cd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	2210      	movs	r2, #16
 8002cee:	4393      	bics	r3, r2
 8002cf0:	001a      	movs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4a2e      	ldr	r2, [pc, #184]	@ (8002dc0 <TIM_OC2_SetConfig+0xe8>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	4a2d      	ldr	r2, [pc, #180]	@ (8002dc4 <TIM_OC2_SetConfig+0xec>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	021b      	lsls	r3, r3, #8
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	2220      	movs	r2, #32
 8002d22:	4393      	bics	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a24      	ldr	r2, [pc, #144]	@ (8002dc8 <TIM_OC2_SetConfig+0xf0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d10d      	bne.n	8002d56 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2280      	movs	r2, #128	@ 0x80
 8002d3e:	4393      	bics	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2240      	movs	r2, #64	@ 0x40
 8002d52:	4393      	bics	r3, r2
 8002d54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a1b      	ldr	r2, [pc, #108]	@ (8002dc8 <TIM_OC2_SetConfig+0xf0>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d00b      	beq.n	8002d76 <TIM_OC2_SetConfig+0x9e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a1a      	ldr	r2, [pc, #104]	@ (8002dcc <TIM_OC2_SetConfig+0xf4>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d007      	beq.n	8002d76 <TIM_OC2_SetConfig+0x9e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a19      	ldr	r2, [pc, #100]	@ (8002dd0 <TIM_OC2_SetConfig+0xf8>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d003      	beq.n	8002d76 <TIM_OC2_SetConfig+0x9e>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a18      	ldr	r2, [pc, #96]	@ (8002dd4 <TIM_OC2_SetConfig+0xfc>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d113      	bne.n	8002d9e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4a17      	ldr	r2, [pc, #92]	@ (8002dd8 <TIM_OC2_SetConfig+0x100>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4a16      	ldr	r2, [pc, #88]	@ (8002ddc <TIM_OC2_SetConfig+0x104>)
 8002d82:	4013      	ands	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	621a      	str	r2, [r3, #32]
}
 8002db8:	46c0      	nop			@ (mov r8, r8)
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b006      	add	sp, #24
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	feff8fff 	.word	0xfeff8fff
 8002dc4:	fffffcff 	.word	0xfffffcff
 8002dc8:	40012c00 	.word	0x40012c00
 8002dcc:	40014000 	.word	0x40014000
 8002dd0:	40014400 	.word	0x40014400
 8002dd4:	40014800 	.word	0x40014800
 8002dd8:	fffffbff 	.word	0xfffffbff
 8002ddc:	fffff7ff 	.word	0xfffff7ff

08002de0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	4a33      	ldr	r2, [pc, #204]	@ (8002ec4 <TIM_OC3_SetConfig+0xe4>)
 8002df6:	401a      	ands	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4a2f      	ldr	r2, [pc, #188]	@ (8002ec8 <TIM_OC3_SetConfig+0xe8>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2203      	movs	r2, #3
 8002e14:	4393      	bics	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	4a29      	ldr	r2, [pc, #164]	@ (8002ecc <TIM_OC3_SetConfig+0xec>)
 8002e26:	4013      	ands	r3, r2
 8002e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	021b      	lsls	r3, r3, #8
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a25      	ldr	r2, [pc, #148]	@ (8002ed0 <TIM_OC3_SetConfig+0xf0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d10d      	bne.n	8002e5a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	4a24      	ldr	r2, [pc, #144]	@ (8002ed4 <TIM_OC3_SetConfig+0xf4>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	021b      	lsls	r3, r3, #8
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	4a20      	ldr	r2, [pc, #128]	@ (8002ed8 <TIM_OC3_SetConfig+0xf8>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ed0 <TIM_OC3_SetConfig+0xf0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00b      	beq.n	8002e7a <TIM_OC3_SetConfig+0x9a>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a1d      	ldr	r2, [pc, #116]	@ (8002edc <TIM_OC3_SetConfig+0xfc>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d007      	beq.n	8002e7a <TIM_OC3_SetConfig+0x9a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ee0 <TIM_OC3_SetConfig+0x100>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d003      	beq.n	8002e7a <TIM_OC3_SetConfig+0x9a>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a1b      	ldr	r2, [pc, #108]	@ (8002ee4 <TIM_OC3_SetConfig+0x104>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d113      	bne.n	8002ea2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ee8 <TIM_OC3_SetConfig+0x108>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4a19      	ldr	r2, [pc, #100]	@ (8002eec <TIM_OC3_SetConfig+0x10c>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	011b      	lsls	r3, r3, #4
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	621a      	str	r2, [r3, #32]
}
 8002ebc:	46c0      	nop			@ (mov r8, r8)
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	b006      	add	sp, #24
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	fffffeff 	.word	0xfffffeff
 8002ec8:	fffeff8f 	.word	0xfffeff8f
 8002ecc:	fffffdff 	.word	0xfffffdff
 8002ed0:	40012c00 	.word	0x40012c00
 8002ed4:	fffff7ff 	.word	0xfffff7ff
 8002ed8:	fffffbff 	.word	0xfffffbff
 8002edc:	40014000 	.word	0x40014000
 8002ee0:	40014400 	.word	0x40014400
 8002ee4:	40014800 	.word	0x40014800
 8002ee8:	ffffefff 	.word	0xffffefff
 8002eec:	ffffdfff 	.word	0xffffdfff

08002ef0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	4a26      	ldr	r2, [pc, #152]	@ (8002fa0 <TIM_OC4_SetConfig+0xb0>)
 8002f06:	401a      	ands	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4a22      	ldr	r2, [pc, #136]	@ (8002fa4 <TIM_OC4_SetConfig+0xb4>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4a21      	ldr	r2, [pc, #132]	@ (8002fa8 <TIM_OC4_SetConfig+0xb8>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	021b      	lsls	r3, r3, #8
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	4a1d      	ldr	r2, [pc, #116]	@ (8002fac <TIM_OC4_SetConfig+0xbc>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	031b      	lsls	r3, r3, #12
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a19      	ldr	r2, [pc, #100]	@ (8002fb0 <TIM_OC4_SetConfig+0xc0>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d00b      	beq.n	8002f68 <TIM_OC4_SetConfig+0x78>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a18      	ldr	r2, [pc, #96]	@ (8002fb4 <TIM_OC4_SetConfig+0xc4>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d007      	beq.n	8002f68 <TIM_OC4_SetConfig+0x78>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a17      	ldr	r2, [pc, #92]	@ (8002fb8 <TIM_OC4_SetConfig+0xc8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d003      	beq.n	8002f68 <TIM_OC4_SetConfig+0x78>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a16      	ldr	r2, [pc, #88]	@ (8002fbc <TIM_OC4_SetConfig+0xcc>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d109      	bne.n	8002f7c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	4a15      	ldr	r2, [pc, #84]	@ (8002fc0 <TIM_OC4_SetConfig+0xd0>)
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	019b      	lsls	r3, r3, #6
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	621a      	str	r2, [r3, #32]
}
 8002f96:	46c0      	nop			@ (mov r8, r8)
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	b006      	add	sp, #24
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	46c0      	nop			@ (mov r8, r8)
 8002fa0:	ffffefff 	.word	0xffffefff
 8002fa4:	feff8fff 	.word	0xfeff8fff
 8002fa8:	fffffcff 	.word	0xfffffcff
 8002fac:	ffffdfff 	.word	0xffffdfff
 8002fb0:	40012c00 	.word	0x40012c00
 8002fb4:	40014000 	.word	0x40014000
 8002fb8:	40014400 	.word	0x40014400
 8002fbc:	40014800 	.word	0x40014800
 8002fc0:	ffffbfff 	.word	0xffffbfff

08002fc4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	4a23      	ldr	r2, [pc, #140]	@ (8003068 <TIM_OC5_SetConfig+0xa4>)
 8002fda:	401a      	ands	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4a1f      	ldr	r2, [pc, #124]	@ (800306c <TIM_OC5_SetConfig+0xa8>)
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	4a1b      	ldr	r2, [pc, #108]	@ (8003070 <TIM_OC5_SetConfig+0xac>)
 8003002:	4013      	ands	r3, r2
 8003004:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	041b      	lsls	r3, r3, #16
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a17      	ldr	r2, [pc, #92]	@ (8003074 <TIM_OC5_SetConfig+0xb0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00b      	beq.n	8003032 <TIM_OC5_SetConfig+0x6e>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a16      	ldr	r2, [pc, #88]	@ (8003078 <TIM_OC5_SetConfig+0xb4>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d007      	beq.n	8003032 <TIM_OC5_SetConfig+0x6e>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a15      	ldr	r2, [pc, #84]	@ (800307c <TIM_OC5_SetConfig+0xb8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d003      	beq.n	8003032 <TIM_OC5_SetConfig+0x6e>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a14      	ldr	r2, [pc, #80]	@ (8003080 <TIM_OC5_SetConfig+0xbc>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d109      	bne.n	8003046 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	4a0c      	ldr	r2, [pc, #48]	@ (8003068 <TIM_OC5_SetConfig+0xa4>)
 8003036:	4013      	ands	r3, r2
 8003038:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	021b      	lsls	r3, r3, #8
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	4313      	orrs	r3, r2
 8003044:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	621a      	str	r2, [r3, #32]
}
 8003060:	46c0      	nop			@ (mov r8, r8)
 8003062:	46bd      	mov	sp, r7
 8003064:	b006      	add	sp, #24
 8003066:	bd80      	pop	{r7, pc}
 8003068:	fffeffff 	.word	0xfffeffff
 800306c:	fffeff8f 	.word	0xfffeff8f
 8003070:	fffdffff 	.word	0xfffdffff
 8003074:	40012c00 	.word	0x40012c00
 8003078:	40014000 	.word	0x40014000
 800307c:	40014400 	.word	0x40014400
 8003080:	40014800 	.word	0x40014800

08003084 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	4a24      	ldr	r2, [pc, #144]	@ (800312c <TIM_OC6_SetConfig+0xa8>)
 800309a:	401a      	ands	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4a20      	ldr	r2, [pc, #128]	@ (8003130 <TIM_OC6_SetConfig+0xac>)
 80030b0:	4013      	ands	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	021b      	lsls	r3, r3, #8
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	4313      	orrs	r3, r2
 80030be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4a1c      	ldr	r2, [pc, #112]	@ (8003134 <TIM_OC6_SetConfig+0xb0>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	051b      	lsls	r3, r3, #20
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a18      	ldr	r2, [pc, #96]	@ (8003138 <TIM_OC6_SetConfig+0xb4>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d00b      	beq.n	80030f4 <TIM_OC6_SetConfig+0x70>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a17      	ldr	r2, [pc, #92]	@ (800313c <TIM_OC6_SetConfig+0xb8>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d007      	beq.n	80030f4 <TIM_OC6_SetConfig+0x70>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a16      	ldr	r2, [pc, #88]	@ (8003140 <TIM_OC6_SetConfig+0xbc>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d003      	beq.n	80030f4 <TIM_OC6_SetConfig+0x70>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a15      	ldr	r2, [pc, #84]	@ (8003144 <TIM_OC6_SetConfig+0xc0>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d109      	bne.n	8003108 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	4a14      	ldr	r2, [pc, #80]	@ (8003148 <TIM_OC6_SetConfig+0xc4>)
 80030f8:	4013      	ands	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	029b      	lsls	r3, r3, #10
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	4313      	orrs	r3, r2
 8003106:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	621a      	str	r2, [r3, #32]
}
 8003122:	46c0      	nop			@ (mov r8, r8)
 8003124:	46bd      	mov	sp, r7
 8003126:	b006      	add	sp, #24
 8003128:	bd80      	pop	{r7, pc}
 800312a:	46c0      	nop			@ (mov r8, r8)
 800312c:	ffefffff 	.word	0xffefffff
 8003130:	feff8fff 	.word	0xfeff8fff
 8003134:	ffdfffff 	.word	0xffdfffff
 8003138:	40012c00 	.word	0x40012c00
 800313c:	40014000 	.word	0x40014000
 8003140:	40014400 	.word	0x40014400
 8003144:	40014800 	.word	0x40014800
 8003148:	fffbffff 	.word	0xfffbffff

0800314c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	2201      	movs	r2, #1
 8003164:	4393      	bics	r3, r2
 8003166:	001a      	movs	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	22f0      	movs	r2, #240	@ 0xf0
 8003176:	4393      	bics	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	220a      	movs	r2, #10
 8003188:	4393      	bics	r3, r2
 800318a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	621a      	str	r2, [r3, #32]
}
 80031a0:	46c0      	nop			@ (mov r8, r8)
 80031a2:	46bd      	mov	sp, r7
 80031a4:	b006      	add	sp, #24
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	2210      	movs	r2, #16
 80031c0:	4393      	bics	r3, r2
 80031c2:	001a      	movs	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003208 <TIM_TI2_ConfigInputStage+0x60>)
 80031d2:	4013      	ands	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	031b      	lsls	r3, r3, #12
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	22a0      	movs	r2, #160	@ 0xa0
 80031e4:	4393      	bics	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	621a      	str	r2, [r3, #32]
}
 80031fe:	46c0      	nop			@ (mov r8, r8)
 8003200:	46bd      	mov	sp, r7
 8003202:	b006      	add	sp, #24
 8003204:	bd80      	pop	{r7, pc}
 8003206:	46c0      	nop			@ (mov r8, r8)
 8003208:	ffff0fff 	.word	0xffff0fff

0800320c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4a08      	ldr	r2, [pc, #32]	@ (8003240 <TIM_ITRx_SetConfig+0x34>)
 8003220:	4013      	ands	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4313      	orrs	r3, r2
 800322a:	2207      	movs	r2, #7
 800322c:	4313      	orrs	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	609a      	str	r2, [r3, #8]
}
 8003236:	46c0      	nop			@ (mov r8, r8)
 8003238:	46bd      	mov	sp, r7
 800323a:	b004      	add	sp, #16
 800323c:	bd80      	pop	{r7, pc}
 800323e:	46c0      	nop			@ (mov r8, r8)
 8003240:	ffcfff8f 	.word	0xffcfff8f

08003244 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
 8003250:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	4a09      	ldr	r2, [pc, #36]	@ (8003280 <TIM_ETR_SetConfig+0x3c>)
 800325c:	4013      	ands	r3, r2
 800325e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	021a      	lsls	r2, r3, #8
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	431a      	orrs	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	4313      	orrs	r3, r2
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	4313      	orrs	r3, r2
 8003270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	609a      	str	r2, [r3, #8]
}
 8003278:	46c0      	nop			@ (mov r8, r8)
 800327a:	46bd      	mov	sp, r7
 800327c:	b006      	add	sp, #24
 800327e:	bd80      	pop	{r7, pc}
 8003280:	ffff00ff 	.word	0xffff00ff

08003284 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	221f      	movs	r2, #31
 8003294:	4013      	ands	r3, r2
 8003296:	2201      	movs	r2, #1
 8003298:	409a      	lsls	r2, r3
 800329a:	0013      	movs	r3, r2
 800329c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	43d2      	mvns	r2, r2
 80032a6:	401a      	ands	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a1a      	ldr	r2, [r3, #32]
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	211f      	movs	r1, #31
 80032b4:	400b      	ands	r3, r1
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	4099      	lsls	r1, r3
 80032ba:	000b      	movs	r3, r1
 80032bc:	431a      	orrs	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	621a      	str	r2, [r3, #32]
}
 80032c2:	46c0      	nop			@ (mov r8, r8)
 80032c4:	46bd      	mov	sp, r7
 80032c6:	b006      	add	sp, #24
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	223c      	movs	r2, #60	@ 0x3c
 80032da:	5c9b      	ldrb	r3, [r3, r2]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e05a      	b.n	800339a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	223c      	movs	r2, #60	@ 0x3c
 80032e8:	2101      	movs	r1, #1
 80032ea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	223d      	movs	r2, #61	@ 0x3d
 80032f0:	2102      	movs	r1, #2
 80032f2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a26      	ldr	r2, [pc, #152]	@ (80033a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d108      	bne.n	8003320 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4a25      	ldr	r2, [pc, #148]	@ (80033a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003312:	4013      	ands	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	4313      	orrs	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2270      	movs	r2, #112	@ 0x70
 8003324:	4393      	bics	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	4313      	orrs	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a19      	ldr	r2, [pc, #100]	@ (80033a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d014      	beq.n	800336e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	2380      	movs	r3, #128	@ 0x80
 800334a:	05db      	lsls	r3, r3, #23
 800334c:	429a      	cmp	r2, r3
 800334e:	d00e      	beq.n	800336e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a15      	ldr	r2, [pc, #84]	@ (80033ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d009      	beq.n	800336e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a14      	ldr	r2, [pc, #80]	@ (80033b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d004      	beq.n	800336e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a12      	ldr	r2, [pc, #72]	@ (80033b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d10c      	bne.n	8003388 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2280      	movs	r2, #128	@ 0x80
 8003372:	4393      	bics	r3, r2
 8003374:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	4313      	orrs	r3, r2
 800337e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	223d      	movs	r2, #61	@ 0x3d
 800338c:	2101      	movs	r1, #1
 800338e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	223c      	movs	r2, #60	@ 0x3c
 8003394:	2100      	movs	r1, #0
 8003396:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	0018      	movs	r0, r3
 800339c:	46bd      	mov	sp, r7
 800339e:	b004      	add	sp, #16
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	46c0      	nop			@ (mov r8, r8)
 80033a4:	40012c00 	.word	0x40012c00
 80033a8:	ff0fffff 	.word	0xff0fffff
 80033ac:	40000400 	.word	0x40000400
 80033b0:	40000800 	.word	0x40000800
 80033b4:	40014000 	.word	0x40014000

080033b8 <memset>:
 80033b8:	0003      	movs	r3, r0
 80033ba:	1882      	adds	r2, r0, r2
 80033bc:	4293      	cmp	r3, r2
 80033be:	d100      	bne.n	80033c2 <memset+0xa>
 80033c0:	4770      	bx	lr
 80033c2:	7019      	strb	r1, [r3, #0]
 80033c4:	3301      	adds	r3, #1
 80033c6:	e7f9      	b.n	80033bc <memset+0x4>

080033c8 <__libc_init_array>:
 80033c8:	b570      	push	{r4, r5, r6, lr}
 80033ca:	2600      	movs	r6, #0
 80033cc:	4c0c      	ldr	r4, [pc, #48]	@ (8003400 <__libc_init_array+0x38>)
 80033ce:	4d0d      	ldr	r5, [pc, #52]	@ (8003404 <__libc_init_array+0x3c>)
 80033d0:	1b64      	subs	r4, r4, r5
 80033d2:	10a4      	asrs	r4, r4, #2
 80033d4:	42a6      	cmp	r6, r4
 80033d6:	d109      	bne.n	80033ec <__libc_init_array+0x24>
 80033d8:	2600      	movs	r6, #0
 80033da:	f000 f823 	bl	8003424 <_init>
 80033de:	4c0a      	ldr	r4, [pc, #40]	@ (8003408 <__libc_init_array+0x40>)
 80033e0:	4d0a      	ldr	r5, [pc, #40]	@ (800340c <__libc_init_array+0x44>)
 80033e2:	1b64      	subs	r4, r4, r5
 80033e4:	10a4      	asrs	r4, r4, #2
 80033e6:	42a6      	cmp	r6, r4
 80033e8:	d105      	bne.n	80033f6 <__libc_init_array+0x2e>
 80033ea:	bd70      	pop	{r4, r5, r6, pc}
 80033ec:	00b3      	lsls	r3, r6, #2
 80033ee:	58eb      	ldr	r3, [r5, r3]
 80033f0:	4798      	blx	r3
 80033f2:	3601      	adds	r6, #1
 80033f4:	e7ee      	b.n	80033d4 <__libc_init_array+0xc>
 80033f6:	00b3      	lsls	r3, r6, #2
 80033f8:	58eb      	ldr	r3, [r5, r3]
 80033fa:	4798      	blx	r3
 80033fc:	3601      	adds	r6, #1
 80033fe:	e7f2      	b.n	80033e6 <__libc_init_array+0x1e>
 8003400:	080034d0 	.word	0x080034d0
 8003404:	080034d0 	.word	0x080034d0
 8003408:	080034d4 	.word	0x080034d4
 800340c:	080034d0 	.word	0x080034d0

08003410 <memcpy>:
 8003410:	2300      	movs	r3, #0
 8003412:	b510      	push	{r4, lr}
 8003414:	429a      	cmp	r2, r3
 8003416:	d100      	bne.n	800341a <memcpy+0xa>
 8003418:	bd10      	pop	{r4, pc}
 800341a:	5ccc      	ldrb	r4, [r1, r3]
 800341c:	54c4      	strb	r4, [r0, r3]
 800341e:	3301      	adds	r3, #1
 8003420:	e7f8      	b.n	8003414 <memcpy+0x4>
	...

08003424 <_init>:
 8003424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003426:	46c0      	nop			@ (mov r8, r8)
 8003428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800342a:	bc08      	pop	{r3}
 800342c:	469e      	mov	lr, r3
 800342e:	4770      	bx	lr

08003430 <_fini>:
 8003430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003432:	46c0      	nop			@ (mov r8, r8)
 8003434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003436:	bc08      	pop	{r3}
 8003438:	469e      	mov	lr, r3
 800343a:	4770      	bx	lr
